%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1911.i126.029.P.m005.c33.video bloggers set-09.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: MSI
%%CreationDate: 2/26/2021
%%BoundingBox: 0 0 500 450
%%HiResBoundingBox: 0 0 500 450
%%CropBox: 0 0 500 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 9 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">1911.i126.029.P.m005.c33.video bloggers set</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2021-02-26T00:38:58+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2021-02-26T00:38:59+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2021-02-26T00:38:59+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>236</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA7AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9JXvmjTrW+msRHcXNxbo&#xA;klwttC8vpiSpTmV6VCk5CUwOaQGGaP8AmdqmseZb+O3hgtNE02RYZkvBJHcuWp8S/sAmuynt1pXK&#xA;DqKlvyc38vDgFWZnu5M4/TY/5Ybv/kUP+asu8QOFwrtL1yy1KW5hhEkdxaFRcW8yGOReYqjcT2ah&#xA;oclGQPJSKTDJIdirsVdirsVdiqyYuImKCr02GCV1skc2Fp5s039NJpv1xFvjL6HpcgDzDcOPhy5/&#xA;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&#xA;9a4w/VPX+reqf7z0uXqeptyp8XXrnUHl0SX/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:OriginalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:a7304ec7-3e0b-7445-96b7-8baf689187b3</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:a7304ec7-3e0b-7445-96b7-8baf689187b3</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:9f887f93-eb8c-4567-8117-83ff5d94be71</stRef:instanceID>
            <stRef:documentID>xmp.did:a7993933-3261-1841-bdda-41333bcb339a</stRef:documentID>
            <stRef:originalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:e2e84dd3-b6d6-cb47-9992-b8b18ae8252d</stEvt:instanceID>
                  <stEvt:when>2019-11-27T03:40:24+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:f9f2d84c-afc4-9f4e-bc22-e61f74db7c90</stEvt:instanceID>
                  <stEvt:when>2019-11-28T15:46:40+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:434cf927-053d-3241-bb20-0e536d4f10c8</stEvt:instanceID>
                  <stEvt:when>2020-09-16T14:50:23+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:a7993933-3261-1841-bdda-41333bcb339a</stEvt:instanceID>
                  <stEvt:when>2021-02-23T15:02:08+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:a7304ec7-3e0b-7445-96b7-8baf689187b3</stEvt:instanceID>
                  <stEvt:when>2021-02-26T00:38:59+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Basic RGB</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>500.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Áåëûé</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>×åðíûé</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
500 450 li
500 0 li
cp
clp
54.8362 328.264 mo
52.6025 328.264 50.7916 326.453 50.7916 324.219 cv
50.7916 321.985 52.6025 320.175 54.8362 320.175 cv
57.0699 320.175 58.8808 321.985 58.8808 324.219 cv
58.8808 326.453 57.0699 328.264 54.8362 328.264 cv
cp
66.8759 326.082 mo
66.8759 322.356 li
63.6553 321.697 li
63.4613 321.017 63.1949 320.369 62.8578 319.763 cv
64.6671 317.023 li
62.0319 314.388 li
59.2922 316.198 li
58.6866 315.86 58.0381 315.594 57.3583 315.4 cv
56.6994 312.179 li
52.9728 312.179 li
52.3141 315.4 li
51.6343 315.594 50.9857 315.86 50.3802 316.198 cv
47.6403 314.388 li
45.0053 317.023 li
46.8146 319.763 li
46.4774 320.369 46.2111 321.017 46.017 321.697 cv
42.7963 322.356 li
42.7963 326.082 li
46.017 326.741 li
46.2111 327.421 46.4774 328.069 46.8146 328.675 cv
45.0053 331.415 li
47.6403 334.05 li
50.3802 332.241 li
50.9857 332.578 51.6343 332.844 52.3141 333.038 cv
52.9728 336.259 li
56.6994 336.259 li
57.3583 333.038 li
58.0381 332.844 58.6866 332.578 59.2922 332.241 cv
62.0319 334.05 li
64.6671 331.415 li
62.8578 328.675 li
63.1948 328.069 63.4613 327.421 63.6553 326.741 cv
66.8759 326.082 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.505882 .588235 .6 rgb
f
88.2635 340.471 mo
46.8448 340.471 li
46.8448 378.257 li
88.2635 378.257 li
88.2635 340.471 li
cp
.929412 .858824 .635294 rgb
f
59.2332 341.274 mo
73.9236 368.254 li
88.4007 343.596 li
74.2856 362.92 li
59.2332 341.274 li
cp
.878431 .780392 .501961 rgb
f
58.9207 340.471 mo
40.3533 340.471 li
40.3533 378.257 li
58.9207 378.257 li
58.9207 340.471 li
cp
f
266.4 335.879 mo
222.743 334.743 li
214.974 373.281 li
272.792 373.281 li
266.4 335.879 li
cp
.866667 .819608 .701961 rgb
f
266.11 334.181 mo
222.559 335.655 li
217.949 358.527 li
269.737 355.407 li
266.11 334.181 li
cp
.8 .745098 .619608 rgb
f
291.948 372.3 mo
195.818 372.3 li
195.818 379.619 li
291.948 379.619 li
291.948 372.3 li
cp
.929412 .901961 .819608 rgb
f
384.771 129.261 mo
102.995 129.261 li
96.1525 129.261 90.6057 134.546 90.6057 141.065 cv
90.6057 332.666 li
90.6057 339.185 96.1525 344.469 102.995 344.469 cv
384.771 344.469 li
391.613 344.469 397.16 339.185 397.16 332.666 cv
397.16 141.065 li
397.16 134.546 391.613 129.261 384.771 129.261 cv
f
146.979 344.469 mo
271.066 344.469 li
313.895 129.261 li
189.808 129.261 li
146.979 344.469 li
.956863 .933333 .87451 rgb
f
384.771 341.444 mo
102.995 341.444 li
96.1525 341.444 90.6057 335.897 90.6057 329.055 cv
90.6057 332.08 li
90.6057 338.922 96.1525 344.469 104.075 345.165 cv
385.852 345.165 li
391.613 344.469 397.16 338.922 397.16 332.08 cv
397.16 329.055 li
397.16 335.897 391.613 341.444 384.771 341.444 cv
.878431 .831373 .713726 rgb
f
384.771 129.261 mo
102.995 129.261 li
96.1525 129.261 90.6057 134.546 90.6057 141.065 cv
90.6057 309.882 li
397.16 309.882 li
397.16 141.065 li
397.16 134.546 391.613 129.261 384.771 129.261 cv
.317647 .298039 .301961 rgb
f
386.5 138.046 mo
101.266 138.046 li
101.266 309.882 li
386.5 309.882 li
386.5 138.046 li
.266667 .235294 .235294 rgb
f
382.556 140.873 mo
104.839 140.873 li
104.839 309.882 li
382.556 309.882 li
382.556 140.873 li
.466667 .372549 .576471 rgb
f
260.918 326.143 mo
226.848 326.143 li
225.476 326.143 224.364 326.857 224.364 327.739 cv
224.364 328.62 225.476 329.335 226.848 329.335 cv
260.918 329.335 li
262.29 329.335 263.402 328.62 263.402 327.739 cv
263.402 326.857 262.29 326.143 260.918 326.143 cv
cp
.8 .745098 .619608 rgb
f
397.16 144.243 mo
397.16 144.226 397.16 144.208 397.16 144.19 cv
397.16 141.597 li
397.16 141.615 397.16 141.633 397.16 141.65 cv
397.16 144.243 li
.956863 .933333 .882353 rgb
f
90.6057 144.243 mo
90.6057 141.65 li
90.6057 134.808 96.1525 129.261 102.995 129.261 cv
384.771 129.261 li
391.596 129.261 397.132 134.779 397.16 141.597 cv
397.16 144.19 li
397.132 137.372 391.596 131.854 384.771 131.854 cv
248.981 131.854 li
249.277 131.013 249.555 130.144 249.802 129.261 cv
188.682 129.261 li
188.163 129.504 187.655 129.743 187.163 129.977 cv
185.914 130.571 184.837 131.19 183.938 131.854 cv
102.995 131.854 li
96.1525 131.854 90.6057 137.401 90.6057 144.243 cv
.607843 .552941 .529412 rgb
f
101.266 263.235 mo
95.9282 258.856 92.0247 254.834 90.6059 251.792 cv
90.6059 225.927 li
90.6059 221.698 li
90.6059 215.68 li
93.9672 217.965 li
94.1834 217.717 94.3977 217.47 94.6136 217.222 cv
95.1231 216.638 95.6338 216.053 96.1294 215.472 cv
96.4332 215.115 96.7252 214.761 97.0238 214.406 cv
97.4819 213.86 97.943 213.314 98.3881 212.772 cv
98.708 212.382 99.0141 211.994 99.3272 211.605 cv
99.7345 211.099 100.147 210.593 100.543 210.089 cv
100.79 209.775 101.027 209.463 101.266 209.15 cv
101.266 213.386 li
99.453 215.292 97.6754 217.285 95.9522 219.314 cv
101.266 222.927 li
101.266 263.235 li
246.359 138.046 mo
180.581 138.046 li
180.57 137.273 180.665 136.556 180.864 135.886 cv
181.108 135.069 181.506 134.322 182.057 133.628 cv
182.559 132.997 183.186 132.41 183.938 131.854 cv
248.981 131.854 li
248.132 134.273 247.142 136.457 246.359 138.046 cv
.207843 .192157 .192157 rgb
f
104.839 266.059 mo
103.59 265.106 102.396 264.163 101.266 263.235 cv
101.266 222.927 li
104.839 225.356 li
104.839 266.059 li
382.556 249.211 mo
382.556 246.106 li
382.601 246.243 382.63 246.365 382.644 246.472 cv
382.74 247.255 382.723 248.227 382.556 249.211 cv
101.266 213.386 mo
101.266 209.15 li
101.349 209.042 101.432 208.933 101.515 208.825 cv
101.876 208.356 102.243 207.886 102.593 207.419 cv
102.94 206.956 103.268 206.496 103.604 206.035 cv
103.911 205.614 104.227 205.192 104.524 204.773 cv
104.63 204.623 104.735 204.474 104.839 204.325 cv
104.839 209.799 li
103.637 210.948 102.444 212.149 101.266 213.386 cv
382.556 202.716 mo
382.556 199.53 li
382.616 199.609 382.671 199.686 382.722 199.761 cv
382.773 199.835 li
382.89 200.014 382.98 200.18 383.04 200.331 cv
383.062 200.399 li
383.113 200.55 383.142 200.69 383.126 200.807 cv
383.064 201.259 382.895 201.834 382.636 202.511 cv
382.61 202.578 382.584 202.647 382.556 202.716 cv
245.021 140.873 mo
181.025 140.873 li
180.741 139.851 180.594 138.913 180.581 138.046 cv
246.359 138.046 li
245.56 139.667 244.977 140.668 244.977 140.668 cv
244.892 140.614 li
244.935 140.7 244.979 140.786 245.021 140.873 cv
.176471 .152941 .152941 rgb
f
300.521 309.882 mo
277.949 309.882 li
197.426 309.882 li
194.704 282.947 li
192.591 287.781 191.032 290.947 191.032 290.947 cv
191.032 290.947 187.664 288.838 182.806 285.117 cv
176.645 290.233 169.366 294.682 162.386 295.055 cv
162.065 295.072 161.743 295.081 161.417 295.081 cv
156.991 295.081 152.099 293.522 147.282 291.221 cv
147.276 291.223 li
134.035 285.428 116.901 275.269 104.839 266.059 cv
104.839 225.356 li
149.006 255.382 li
152.11 257.556 li
152.942 256.913 153.78 256.053 154.581 255.104 cv
153.893 253.956 153.233 252.795 152.621 251.613 cv
162.154 231.856 173.07 211.84 187.457 204.271 cv
191.093 201.562 195.82 198.494 200.938 195.612 cv
201.016 195.568 li
201.788 195.134 202.568 194.705 203.354 194.282 cv
203.446 194.232 203.538 194.183 203.63 194.133 cv
204.296 193.776 204.966 193.425 205.64 193.078 cv
205.308 192.822 li
209.394 186.653 li
209.394 186.653 209.603 186.783 209.968 187.003 cv
208.756 177.487 li
194.942 168.265 188.963 155.077 188.963 155.077 cv
188.991 154.972 li
184.991 149.426 182.441 145.143 181.295 141.746 cv
181.194 141.448 181.105 141.157 181.025 140.873 cv
245.021 140.873 li
247.782 146.441 249.102 153.327 250.28 157.853 cv
252.328 165.724 268.467 183.527 268.467 183.527 cv
268.467 183.527 267.181 191.458 259.612 195.849 cv
260.064 196.101 260.514 196.357 260.965 196.617 cv
261.091 196.689 261.216 196.762 261.341 196.835 cv
262.103 197.279 262.861 197.733 263.613 198.201 cv
263.775 198.3 li
264.612 198.824 265.443 199.361 266.262 199.914 cv
266.264 199.916 li
267.267 200.593 268.247 201.286 269.211 202.006 cv
304.947 227.605 325.374 251.473 325.374 251.473 cv
325.374 251.473 324.777 252.91 323.48 255.108 cv
324.697 255.969 325.794 256.669 326.654 257.093 cv
357.055 232.902 li
356.89 232.828 356.723 232.759 356.562 232.674 cv
356.302 232.539 356.048 232.389 355.8 232.228 cv
355.8 232.228 355.197 231.779 354.304 231 cv
354.176 230.889 354.043 230.771 353.904 230.646 cv
353.627 230.398 353.33 230.123 353.02 229.827 cv
352.865 229.678 352.707 229.524 352.547 229.364 cv
352.065 228.886 351.564 228.359 351.066 227.795 cv
350.568 227.229 350.075 226.626 349.61 225.993 cv
349.3 225.571 349.003 225.136 348.726 224.691 cv
348.449 224.246 348.192 223.791 347.963 223.329 cv
347.734 222.866 347.531 222.396 347.364 221.922 cv
347.197 221.448 347.065 220.969 346.975 220.488 cv
346.659 218.806 346.859 217.102 347.891 215.5 cv
348.053 215.248 348.232 214.972 348.42 214.685 cv
348.497 214.568 li
348.677 214.293 348.868 214.003 349.069 213.7 cv
349.078 213.687 li
354.256 205.878 365.978 189.234 367.224 188.929 cv
367.256 188.921 367.292 188.917 367.334 188.917 cv
368.963 188.917 377.926 194.759 381.578 198.428 cv
381.578 198.428 li
381.973 198.825 382.303 199.195 382.556 199.53 cv
382.556 202.716 li
382.307 203.344 381.986 204.052 381.606 204.826 cv
381.183 205.686 380.687 206.626 380.134 207.625 cv
379.766 208.292 379.372 208.984 378.957 209.697 cv
376.885 213.26 374.302 217.325 371.817 221.106 cv
371.32 221.862 370.827 222.607 370.343 223.335 cv
370.101 223.698 369.861 224.057 369.624 224.411 cv
369.15 225.119 368.688 225.807 368.241 226.467 cv
368.129 226.632 368.021 226.791 367.911 226.953 cv
371.772 231.415 381.49 242.846 382.556 246.106 cv
382.556 249.211 li
382.153 251.59 380.882 254.037 378.261 254.036 cv
377.413 254.036 376.422 253.78 375.275 253.182 cv
375.022 253.031 li
367.226 263.589 356.687 282.777 339.233 290.44 cv
334.169 292.83 328.646 294.661 323.6 294.661 cv
323.009 294.661 322.425 294.636 321.849 294.584 cv
314.164 293.887 304.337 286.545 296.648 279.635 cv
298.934 295.505 300.351 308.324 300.521 309.882 cv
104.839 209.799 mo
104.839 204.325 li
105.125 203.913 105.403 203.503 105.684 203.092 cv
105.9 202.777 106.126 202.46 106.336 202.146 cv
106.92 201.273 107.484 200.403 108.024 199.537 cv
107.587 199.122 107.173 198.693 106.794 198.247 cv
106.521 197.925 106.287 197.59 106.074 197.248 cv
105.958 197.065 li
105.763 196.735 105.595 196.397 105.453 196.053 cv
105.376 195.853 li
105.24 195.496 105.123 195.136 105.041 194.77 cv
105.035 194.739 li
104.955 194.376 104.907 194.009 104.878 193.641 cv
104.862 193.453 li
104.842 193.09 104.847 192.726 104.874 192.363 cv
104.892 192.169 li
104.928 191.793 104.983 191.419 105.068 191.049 cv
105.072 191.031 li
105.159 190.656 105.275 190.287 105.409 189.923 cv
105.457 189.79 li
105.595 189.431 105.756 189.079 105.938 188.735 cv
106.011 188.603 li
106.403 187.886 106.888 187.21 107.458 186.592 cv
107.501 186.544 li
107.787 186.237 108.095 185.948 108.422 185.675 cv
108.5 185.61 li
109.181 185.05 109.941 184.566 110.776 184.18 cv
110.779 184.179 li
111.192 183.988 111.624 183.824 112.072 183.684 cv
112.156 183.659 li
113.068 183.381 114.045 183.213 115.079 183.182 cv
115.202 183.178 115.326 183.176 115.451 183.176 cv
116.97 183.176 118.603 183.46 120.317 184.107 cv
120.317 184.107 109.909 190.343 116.743 194.889 cv
118.053 195.761 119.287 196.112 120.426 196.112 cv
121.226 196.112 121.98 195.938 122.681 195.65 cv
125.732 194.394 127.771 190.945 128.238 190.094 cv
128.247 190.077 li
128.31 189.958 li
128.32 189.939 li
128.34 189.901 li
128.34 189.901 136.408 191.296 131.055 199.939 cv
129.513 202.428 127.324 203.889 124.857 204.567 cv
124.45 204.679 124.036 204.77 123.615 204.839 cv
123.605 204.841 li
123.189 204.909 122.769 204.957 122.343 204.986 cv
122.309 204.989 li
121.993 205.009 121.676 205.019 121.356 205.019 cv
121.256 205.019 121.156 205.018 121.056 205.016 cv
120.982 205.015 li
120.575 205.005 120.167 204.979 119.756 204.937 cv
119.643 204.927 li
119.247 204.884 118.85 204.826 118.453 204.755 cv
118.301 204.729 li
117.913 204.657 117.527 204.571 117.141 204.473 cv
116.973 204.433 li
116.58 204.33 116.19 204.214 115.801 204.086 cv
115.669 204.045 li
115.242 203.902 114.819 203.746 114.401 203.575 cv
114.396 203.573 li
113.942 203.388 113.493 203.191 113.053 202.975 cv
110.308 204.879 107.549 207.209 104.839 209.799 cv
.305882 .239216 .368627 rgb
f
248.981 131.854 mo
183.938 131.854 li
184.837 131.19 185.914 130.571 187.163 129.977 cv
187.655 129.743 188.163 129.504 188.682 129.261 cv
249.802 129.261 li
249.555 130.144 249.277 131.013 248.981 131.854 cv
.396078 .356863 .341176 rgb
f
387.141 345.165 mo
318.854 345.165 li
318.854 345.165 li
385.852 345.165 li
388.906 344.796 391.899 343.065 394.039 340.499 cv
395.981 338.415 397.16 335.672 397.16 332.666 cv
397.16 332.133 li
397.16 332.133 li
397.16 333.574 li
397.16 334.091 li
397.16 336.751 396.109 339.172 394.392 341.017 cv
392.496 343.293 389.85 344.838 387.141 345.165 cv
.652134 .642138 .644137 rgb
f
384.771 341.444 mo
317.984 341.444 li
317.301 337.801 317.067 333.983 317.347 330.047 cv
317.861 322.808 320.037 315.962 323.477 309.882 cv
382.556 309.882 li
386.5 309.882 li
397.16 309.882 li
397.16 329.108 li
397.132 335.926 391.596 341.444 384.771 341.444 cv
394.039 340.499 mo
395.925 338.237 397.147 335.328 397.16 332.133 cv
397.16 332.666 li
397.16 335.672 395.981 338.415 394.039 340.499 cv
.603922 .580392 .529412 rgb
f
385.852 345.165 mo
318.854 345.165 li
318.511 343.947 318.221 342.706 317.984 341.444 cv
384.771 341.444 li
391.596 341.444 397.132 335.926 397.16 329.108 cv
397.16 329.108 li
397.16 330.894 li
397.16 332.133 li
397.16 332.133 li
397.147 335.328 395.925 338.237 394.039 340.499 cv
391.899 343.065 388.906 344.796 385.852 345.165 cv
.572549 .533333 .458824 rgb
f
397.16 309.882 mo
397.16 309.882 li
386.5 309.882 li
386.5 283.354 li
390.264 283.987 393.836 285.099 397.16 286.624 cv
397.16 309.882 li
.207843 .192157 .192157 rgb
f
386.5 309.882 mo
382.556 309.882 li
382.556 282.874 li
383.892 282.975 385.207 283.136 386.5 283.354 cv
386.5 309.882 li
.176471 .152941 .152941 rgb
f
382.556 309.882 mo
323.477 309.882 li
330.795 296.945 343.833 287.474 358.754 285.032 cv
358.743 285.024 li
358.937 285 li
360.045 284.824 361.162 284.689 362.288 284.591 cv
370.172 283.63 li
372.401 283.189 374.674 282.907 376.979 282.799 cv
377.028 282.798 li
377.728 282.766 378.429 282.744 379.134 282.744 cv
380.288 282.744 381.43 282.788 382.556 282.874 cv
382.556 309.882 li
.305882 .239216 .368627 rgb
f
248.322 86.455 mo
240.386 77.1167 223.71 85.7389 213.205 91.5734 cv
203.509 96.9587 202.776 103.771 211.307 121.926 cv
259.977 102.356 li
259.977 102.356 258.64 98.5974 248.322 86.455 cv
cp
.411765 .580392 .717647 rgb
f
217.098 89.4583 mo
215.733 90.1791 214.426 90.8953 213.205 91.5734 cv
203.509 96.9587 202.776 103.771 211.307 121.926 cv
244.286 108.665 li
230.505 107.491 219.468 99.5985 217.098 89.4583 cv
cp
.317647 .490196 .607843 rgb
f
233.577 97.9751 mo
218.652 99.0239 211.066 121.621 211.066 121.621 cv
211.066 121.621 214.948 137.613 227.371 148.539 cv
231.173 147.22 li
231.173 147.22 248.502 96.9263 233.577 97.9751 cv
cp
.427451 .172549 .145098 rgb
f
320.471 231.053 mo
320.471 231.053 330.266 243.022 333.813 244.696 cv
337.36 246.369 350.027 237.788 350.027 237.788 cv
360.501 271.922 li
360.501 271.922 337.551 292.452 322.717 290.813 cv
307.883 289.173 288.756 257.055 288.756 257.055 cv
320.471 231.053 li
cp
.905882 .607843 .411765 rgb
f
167.18 234.301 mo
167.18 234.301 160.713 245.568 156.629 247.123 cv
152.545 248.679 138.786 232.098 138.786 232.098 cv
125.013 263.714 li
125.013 263.714 145.603 292.802 162.611 291.656 cv
179.62 290.511 202.332 259.645 202.332 259.645 cv
167.18 234.301 li
cp
f
283.564 177.27 mo
288.52 270.809 li
318.571 268.305 332.761 237.419 332.761 237.419 cv
332.761 237.419 315.649 208.203 283.564 177.27 cv
cp
.929412 .858824 .635294 rgb
f
283.705 179.921 mo
288.52 270.809 li
295.379 270.238 301.402 268.179 306.629 265.354 cv
308.547 255.012 308.632 242.301 306.434 228.835 cv
302.765 206.353 293.738 187.867 283.705 179.921 cv
cp
.847059 .764706 .529412 rgb
f
195.028 310.043 mo
298.72 310.043 li
298.72 310.043 301.876 219.055 294.78 195.265 cv
287.685 171.474 255.933 158.354 248.869 157.284 cv
235.096 155.197 198.784 181.074 194.193 188.587 cv
189.602 196.099 197.532 257.454 197.532 257.454 cv
195.028 310.043 li
cp
.411765 .580392 .717647 rgb
f
299.108 240.655 mo
298.515 303.682 278.708 306.377 254.343 306.377 cv
229.605 306.377 209.55 303.646 209.55 237.757 cv
209.55 212.437 212.52 188.977 217.571 169.665 cv
206.407 176.739 196.453 184.888 194.193 188.587 cv
189.602 196.099 197.532 257.454 197.532 257.454 cv
195.028 310.043 li
298.72 310.043 li
298.72 310.043 299.987 273.484 299.108 240.655 cv
cp
.321569 .505882 .627451 rgb
f
216.904 310.043 mo
219.795 295.999 221.495 278.946 221.495 260.542 cv
221.495 222.909 214.405 190.879 204.493 178.839 cv
199.338 182.859 195.493 186.46 194.193 188.587 cv
189.602 196.099 197.532 257.454 197.532 257.454 cv
195.028 310.043 li
216.904 310.043 li
cp
f
159.968 238.672 mo
167.898 266.218 191.689 286.565 191.689 286.565 cv
191.689 286.565 212.428 247.321 214.227 227.715 cv
217.357 193.595 201.868 180.942 201.868 180.942 cv
186.471 190.256 172.529 214.611 159.968 238.672 cv
cp
.929412 .858824 .635294 rgb
f
184.708 269.133 mo
175.108 266.533 172.853 244.018 179.671 218.843 cv
183.305 205.423 188.784 193.958 194.562 186.57 cv
182.03 198.112 170.51 218.477 159.968 238.672 cv
167.898 266.218 191.689 286.565 191.689 286.565 cv
191.689 286.565 210.888 250.228 213.937 230.018 cv
206.988 254.277 194.081 271.672 184.708 269.133 cv
cp
.847059 .764706 .529412 rgb
f
201.868 180.942 mo
199.425 182.42 197.023 184.313 194.654 186.486 cv
198.639 188.564 203.569 190.262 209.199 191.488 cv
205.724 184.094 201.868 180.942 201.868 180.942 cv
cp
f
333.217 244.354 mo
327.791 261.467 324.776 276.03 341.053 285.63 cv
360.767 275.68 382.304 253.282 386.898 237.489 cv
370.243 219.398 li
333.217 244.354 li
cp
.929412 .72549 .517647 rgb
f
370.243 219.398 mo
358.889 227.051 li
362.428 226.594 363.269 228.866 365.388 230.75 cv
372.311 236.904 369.283 252.408 355.943 267.414 cv
349.789 274.336 342.986 279.564 336.755 282.614 cv
338.01 283.666 339.432 284.673 341.053 285.63 cv
360.767 275.68 382.304 253.282 386.898 237.489 cv
370.243 219.398 li
cp
.905882 .607843 .411765 rgb
f
158.513 245.908 mo
173.956 262.65 166.921 278.73 148.715 284.015 cv
129.452 272.799 113.165 248.312 110.275 236.34 cv
127.83 216.134 li
158.513 245.908 li
cp
.929412 .72549 .517647 rgb
f
158.513 245.908 mo
155.801 243.276 li
159.022 255.473 157.873 265.584 151.876 269.02 cv
142.864 274.184 126.376 262.346 115.049 242.578 cv
113.639 240.117 112.376 237.649 111.262 235.204 cv
110.275 236.34 li
113.165 248.312 129.036 275.776 148.298 286.992 cv
166.505 281.707 173.956 262.65 158.513 245.908 cv
cp
.905882 .607843 .411765 rgb
f
91.2926 298.416 mo
81.4118 298.416 li
80.0018 298.416 78.8587 299.559 78.8587 300.969 cv
78.8587 304.038 li
78.8587 305.448 80.0018 306.591 81.4118 306.591 cv
91.2926 306.591 li
92.7027 306.591 93.8459 305.448 93.8459 304.038 cv
93.8459 300.969 li
93.8459 299.559 92.7027 298.416 91.2926 298.416 cv
cp
.929412 .858824 .635294 rgb
f
88.1393 298.521 mo
85.9953 298.521 li
84.5852 298.521 83.4422 299.664 83.4422 301.074 cv
83.4422 304.142 li
83.4422 305.552 84.5852 306.695 85.9953 306.695 cv
88.1393 306.695 li
89.5494 306.695 90.6924 305.552 90.6924 304.142 cv
90.6924 301.074 li
90.6924 299.664 89.5494 298.521 88.1393 298.521 cv
cp
.956863 .933333 .87451 rgb
f
435.717 266.574 mo
429.668 266.574 424.764 261.67 424.764 255.621 cv
424.764 249.572 429.668 244.668 435.717 244.668 cv
441.766 244.668 446.67 249.572 446.67 255.621 cv
446.67 261.67 441.766 266.574 435.717 266.574 cv
cp
455.019 258.608 mo
455.019 252.634 li
449.856 251.578 li
449.545 250.488 449.117 249.448 448.577 248.478 cv
451.478 244.085 li
447.253 239.861 li
442.861 242.761 li
441.89 242.221 440.85 241.794 439.76 241.483 cv
438.704 236.32 li
432.73 236.32 li
431.674 241.483 li
430.584 241.794 429.544 242.221 428.574 242.761 cv
424.181 239.861 li
419.957 244.085 li
422.857 248.478 li
422.317 249.448 421.89 250.488 421.579 251.578 cv
416.416 252.634 li
416.416 258.608 li
421.579 259.664 li
421.89 260.754 422.317 261.794 422.857 262.765 cv
419.957 267.157 li
424.181 271.382 li
428.574 268.481 li
429.544 269.021 430.584 269.449 431.674 269.76 cv
432.73 274.923 li
438.704 274.923 li
439.76 269.76 li
440.85 269.449 441.89 269.022 442.861 268.481 cv
447.253 271.382 li
451.478 267.157 li
448.577 262.765 li
449.117 261.794 449.545 260.754 449.856 259.664 cv
455.019 258.608 li
cp
.505882 .588235 .6 rgb
f
417.394 230.272 mo
413.542 230.272 410.42 227.15 410.42 223.298 cv
410.42 219.447 413.542 216.324 417.394 216.324 cv
421.245 216.324 424.368 219.447 424.368 223.298 cv
424.368 227.15 421.245 230.272 417.394 230.272 cv
cp
433.257 225.753 mo
433.257 220.843 li
429.014 219.975 li
428.758 219.079 428.407 218.225 427.963 217.427 cv
430.347 213.817 li
426.875 210.345 li
423.265 212.729 li
422.467 212.285 421.613 211.934 420.717 211.678 cv
419.849 207.435 li
414.939 207.435 li
414.071 211.678 li
413.175 211.934 412.321 212.285 411.523 212.729 cv
407.913 210.345 li
404.441 213.817 li
406.825 217.427 li
406.381 218.225 406.03 219.079 405.774 219.975 cv
401.531 220.843 li
401.531 225.753 li
405.774 226.621 li
406.03 227.517 406.381 228.371 406.825 229.169 cv
404.441 232.779 li
407.913 236.251 li
411.523 233.867 li
412.321 234.311 413.175 234.662 414.071 234.918 cv
414.939 239.161 li
419.849 239.161 li
420.717 234.918 li
421.613 234.662 422.467 234.311 423.265 233.867 cv
426.875 236.251 li
430.347 232.779 li
427.963 229.169 li
428.407 228.371 428.758 227.517 429.014 226.621 cv
433.257 225.753 li
cp
f
385.524 201.25 mo
382.323 203.131 374.306 208.272 367.993 218.421 cv
365.655 222.18 366.384 227.014 369.684 230.046 cv
373.591 233.635 li
376.453 236.265 383.53 238.584 388.353 236.398 cv
393.414 234.104 396.365 226.893 398.632 222.834 cv
404.573 212.194 389.479 198.925 385.524 201.25 cv
cp
.905882 .607843 .411765 rgb
f
371.65 200.823 mo
381.674 210.828 li
380.155 221.432 li
365.141 209.514 li
371.65 200.823 li
cp
.909804 .552941 .227451 rgb
f
366.067 217.152 mo
366.067 217.152 377.917 237.411 384.742 239.024 cv
391.567 240.636 392.431 232.271 391.597 228.549 cv
390.763 224.827 372 209.304 372 209.304 cv
366.067 217.152 li
cp
.929412 .858824 .635294 rgb
f
248.869 157.284 mo
240.017 155.942 221.864 166.151 208.797 175.612 cv
222.944 195.307 225.848 220.492 225.578 236.874 cv
225.523 240.208 228.204 242.936 231.538 242.973 cv
281.562 243.532 li
284.765 243.568 287.445 241.096 287.647 237.9 cv
288.431 225.512 289.247 195.563 280.931 174.758 cv
268.946 163.949 253.531 157.99 248.869 157.284 cv
cp
f
280.931 174.758 mo
277.94 172.061 275.077 170.32 276.764 171.842 cv
285.08 192.646 284.265 222.595 283.48 234.983 cv
283.278 238.179 280.598 240.651 277.395 240.616 cv
227.371 240.056 li
227.037 240.053 226.715 240.003 226.396 239.947 cv
227.426 241.729 229.328 242.948 231.538 242.973 cv
281.562 243.532 li
284.765 243.568 287.445 241.096 287.647 237.9 cv
288.431 225.512 289.247 195.563 280.931 174.758 cv
cp
.847059 .764706 .529412 rgb
f
248.869 157.284 mo
240.017 155.942 221.865 166.151 208.797 175.612 cv
212.72 181.074 215.768 186.96 218.134 192.961 cv
225.03 193.77 232.604 193.959 240.526 193.398 cv
258.099 192.152 273.485 187.511 283.165 181.304 cv
282.504 179.05 281.769 176.854 280.931 174.758 cv
268.946 163.949 253.531 157.99 248.869 157.284 cv
cp
f
226.748 163.753 mo
227.583 129.32 li
252.417 129.111 li
259.095 160.414 li
257.008 177.109 234.052 180.031 226.748 163.753 cv
cp
.823529 .458824 .345098 rgb
f
221.322 166.883 mo
226.331 159.37 li
226.331 159.37 243.117 173.212 249.495 171.683 cv
253.647 170.688 259.303 157.701 259.303 157.701 cv
266.19 163.544 li
265.941 180.956 li
251.774 179.012 li
241.218 187.901 li
221.322 166.883 li
cp
.956863 .894118 .721569 rgb
f
223.556 112.551 mo
224.005 147.547 240.76 173.737 240.76 173.737 cv
240.76 173.737 257.413 176.42 269.793 172.379 cv
282.173 168.337 285.623 154.801 285.623 154.801 cv
285.623 154.801 272.209 133.456 271.366 123.976 cv
270.522 114.497 270.38 96.3806 261.041 93.2919 cv
251.701 90.203 223.268 90.0383 223.556 112.551 cv
cp
.517647 .223529 .176471 rgb
f
268.302 105.954 mo
268.646 105.954 268.986 105.974 269.328 105.984 cv
268.008 99.9927 265.644 94.8143 261.041 93.2919 cv
251.701 90.203 223.268 90.0382 223.556 112.551 cv
223.716 124.999 225.942 136.323 228.74 145.76 cv
231.12 123.336 247.919 105.954 268.302 105.954 cv
cp
.427451 .172549 .145098 rgb
f
225.352 124.33 mo
221.37 121.557 217.487 122.468 216.677 126.365 cv
215.868 130.261 218.439 135.668 222.421 138.44 cv
226.402 141.213 230.286 140.302 231.095 136.406 cv
231.904 132.509 229.333 127.103 225.352 124.33 cv
cp
.929412 .72549 .517647 rgb
f
267.224 70.4139 mo
245.138 71.653 217.615 98.1783 211.307 121.926 cv
221.345 104.472 256.151 91.3716 268.703 103.346 cv
268.703 103.346 289.309 69.1749 267.224 70.4139 cv
cp
.929412 .858824 .635294 rgb
f
235.807 109.658 mo
235.807 109.658 236.2 128.893 239.658 133.036 cv
243.177 137.251 269.104 130.834 269.31 127.719 cv
269.509 124.711 266.947 108.218 266.26 105.52 cv
263.654 95.2819 236.001 100.667 235.807 109.658 cv
cp
.929412 .72549 .517647 rgb
f
263.958 108.454 mo
264.934 108.454 265.898 108.492 266.855 108.549 cv
266.608 107.144 266.396 106.055 266.26 105.52 cv
263.654 95.2819 236.001 100.667 235.807 109.658 cv
235.807 109.658 235.887 113.52 236.285 118.153 cv
242.966 112.22 252.881 108.454 263.958 108.454 cv
cp
.905882 .607843 .411765 rgb
f
118.506 360.337 mo
118.506 360.337 113.297 323.877 113.506 313.877 cv
119.964 313.044 133.298 342.417 133.298 360.337 cv
118.506 360.337 li
cp
120.823 307.681 mo
118.643 305.774 75.5888 303.321 75.5888 303.321 cv
72.0464 315.856 69.8665 356.185 76.9513 378.257 cv
143.167 378.257 li
143.167 378.257 144.205 328.141 120.823 307.681 cv
cp
.929412 .768627 .317647 rgb
f
60.2797 295.879 mo
56.9076 296.584 53.6026 294.422 52.8975 291.05 cv
52.1924 287.678 54.3545 284.373 57.7264 283.668 cv
61.0985 282.963 64.4036 285.125 65.1087 288.497 cv
65.8137 291.869 63.6516 295.174 60.2797 295.879 cv
cp
77.766 288.786 mo
76.5898 283.161 li
71.5202 283.183 li
71.0127 282.218 70.4058 281.323 69.7058 280.515 cv
71.5724 275.808 li
66.7627 272.662 li
63.1978 276.258 li
62.1774 275.94 61.1144 275.743 60.0268 275.665 cv
58.0158 271.011 li
52.3903 272.187 li
52.4123 277.257 li
51.4473 277.764 50.5524 278.371 49.7447 279.071 cv
45.0376 277.204 li
41.8915 282.014 li
45.4876 285.579 li
45.1699 286.599 44.9724 287.662 44.8939 288.75 cv
40.2402 290.761 li
41.4165 296.386 li
46.4859 296.364 li
46.9937 297.329 47.6005 298.224 48.3005 299.032 cv
46.4339 303.739 li
51.2434 306.885 li
54.8083 303.289 li
55.8287 303.607 56.8919 303.804 57.9794 303.883 cv
59.9903 308.537 li
65.6159 307.36 li
65.5938 302.291 li
66.5589 301.783 67.4539 301.176 68.2614 300.476 cv
72.9686 302.343 li
76.1147 297.533 li
72.5185 293.969 li
72.8362 292.948 73.0339 291.885 73.1122 290.797 cv
77.766 288.786 li
cp
.505882 .588235 .6 rgb
f
139.575 344.685 mo
142.048 365.406 135.381 371.494 118.942 371.494 cv
102.527 371.494 87.6017 357.649 79.6673 330.959 cv
76.7917 321.286 75.7976 311.784 76.4367 303.37 cv
75.9036 303.339 75.5888 303.321 75.5888 303.321 cv
72.0464 315.856 69.8665 356.185 76.9513 378.257 cv
143.167 378.257 li
143.167 378.257 143.495 362.279 139.575 344.685 cv
cp
.917647 .678431 .258824 rgb
f
118.506 360.337 mo
118.506 360.337 113.297 323.877 113.506 313.877 cv
119.964 313.044 133.298 342.417 133.298 360.337 cv
118.506 360.337 li
cp
109.618 311.813 mo
109.341 322.975 116.267 363.67 116.267 363.67 cv
135.937 363.67 li
135.937 343.668 126.839 311.813 109.618 311.813 cv
cp
f
107.672 331.378 mo
76.4212 331.378 li
78.9213 359.92 li
110.172 359.92 li
107.672 331.378 li
cp
.929412 .858824 .635294 rgb
f
104.212 324.294 mo
77.0462 324.294 li
77.5896 328.044 li
104.755 328.044 li
104.212 324.294 li
cp
f
41.4821 341.316 mo
48.5908 362.18 li
57.7578 341.316 li
48.9004 358.575 li
41.4821 341.316 li
cp
.776471 .658824 .360784 rgb
f
57.6538 376.347 mo
48.8783 359.129 li
41.3779 376.347 li
48.8567 362.104 li
57.6538 376.347 li
cp
f
224.312 127.509 mo
221.805 125.591 219.46 125.931 219.076 128.27 cv
218.691 130.608 220.412 134.059 222.919 135.978 cv
225.427 137.896 227.771 137.555 228.156 135.217 cv
228.541 132.878 226.82 129.427 224.312 127.509 cv
cp
.823529 .458824 .345098 rgb
f
226.774 132.413 mo
225.244 131.232 223.748 131.528 223.432 133.075 cv
223.116 134.622 224.099 136.835 225.629 138.016 cv
227.158 139.198 228.654 138.902 228.97 137.355 cv
229.287 135.807 228.303 133.595 226.774 132.413 cv
cp
.929412 .72549 .517647 rgb
f
268.77 72.6116 mo
272.527 72.4006 275.026 73.2316 276.623 74.7279 cv
275.374 71.8856 272.548 70.1151 267.224 70.4139 cv
245.138 71.653 217.615 98.1781 211.307 121.926 cv
212.477 119.89 213.997 117.917 215.767 116.032 cv
225.306 94.7207 249.172 73.7111 268.77 72.6116 cv
cp
.866667 .776471 .521569 rgb
f
233.231 253.736 mo
233.231 251.205 231.832 249.153 230.106 249.153 cv
228.38 249.153 226.981 251.205 226.981 253.736 cv
226.981 256.268 228.38 258.32 230.106 258.32 cv
231.832 258.32 233.231 256.268 233.231 253.736 cv
cp
.956863 .894118 .721569 rgb
f
287.191 252.834 mo
287.191 250.302 285.792 248.25 284.066 248.25 cv
282.34 248.25 280.941 250.302 280.941 252.834 cv
280.941 255.365 282.34 257.417 284.066 257.417 cv
285.792 257.417 287.191 255.365 287.191 252.834 cv
cp
f
233.439 264.57 mo
220.105 264.57 li
220.105 262.903 li
233.439 262.903 li
235.584 262.903 237.329 261.159 237.329 259.015 cv
237.329 250.403 li
238.996 250.403 li
238.996 259.015 li
238.996 262.078 236.503 264.57 233.439 264.57 cv
cp
.321569 .505882 .627451 rgb
f
287.053 264.57 mo
280.189 264.57 li
277.847 264.57 275.941 262.078 275.941 259.015 cv
275.941 250.403 li
277.607 250.403 li
277.607 259.015 li
277.607 261.122 278.789 262.903 280.189 262.903 cv
287.053 262.903 li
289.196 262.903 290.941 261.159 290.941 259.015 cv
290.941 251.792 li
292.608 251.792 li
292.608 259.015 li
292.608 262.078 290.116 264.57 287.053 264.57 cv
cp
f
383.74 165.676 mo
377.197 162.893 li
375.504 162.173 373.548 162.961 372.828 164.654 cv
368.25 175.415 li
380.925 180.805 li
385.502 170.045 li
386.222 168.352 385.433 166.396 383.74 165.676 cv
cp
.698039 .8 .807843 rgb
f
389.668 145.406 mo
387.887 144.649 li
378.567 166.766 li
380.349 167.523 li
389.668 145.406 li
cp
f
382.15 160.398 mo
380.556 159.72 378.713 160.463 378.035 162.057 cv
376.583 165.469 li
382.358 167.926 li
383.81 164.514 li
384.488 162.919 383.745 161.076 382.15 160.398 cv
cp
f
383.74 165.676 mo
377.197 162.893 li
376.218 162.476 375.157 162.577 374.291 163.053 cv
374.374 163.219 374.43 163.388 374.52 163.553 cv
377.188 168.432 382.106 170.882 385.505 169.024 cv
385.6 168.972 385.67 168.89 385.76 168.832 cv
385.796 167.504 385.037 166.227 383.74 165.676 cv
cp
.827451 .92549 .929412 rgb
f
384.39 157.933 mo
383.061 156.1 li
382.115 158.345 li
383.444 160.178 li
384.39 157.933 li
cp
.568627 .682353 .686275 rgb
f
386.076 153.931 mo
384.748 152.098 li
383.802 154.343 li
385.13 156.176 li
386.076 153.931 li
cp
f
387.762 149.929 mo
386.434 148.096 li
385.488 150.341 li
386.817 152.174 li
387.762 149.929 li
cp
f
389.449 145.926 mo
388.806 145.039 li
387.887 144.649 li
387.175 146.339 li
388.503 148.171 li
389.449 145.926 li
cp
f
386.448 175.013 mo
386.354 180.85 375.394 207.289 371.162 217.289 cv
370.151 219.677 367.952 221.34 365.381 221.674 cv
364.21 221.826 363.019 221.692 361.911 221.282 cv
361.911 221.282 347.691 214.72 351.699 204.522 cv
355.322 195.304 367.159 167.687 368.518 166.827 cv
370.147 165.795 386.495 172.089 386.448 175.013 cv
cp
.976471 .917647 .752941 rgb
f
386.448 175.013 mo
386.457 174.391 385.722 173.616 384.548 172.792 cv
383.642 176.345 382.428 180.081 380.874 183.885 cv
373.939 200.856 363.223 212.531 356.938 209.964 cv
354.559 208.991 353.16 206.111 352.712 201.993 cv
352.33 202.933 351.986 203.791 351.699 204.522 cv
347.691 214.72 361.911 221.282 361.911 221.282 cv
363.019 221.692 364.21 221.826 365.381 221.674 cv
367.952 221.34 370.151 219.677 371.162 217.289 cv
375.394 207.289 386.354 180.85 386.448 175.013 cv
cp
.929412 .858824 .635294 rgb
f
445.477 328.101 mo
443.935 299.648 419.564 276.583 391.043 276.583 cv
362.522 276.583 340.65 299.648 342.192 328.101 cv
343.733 356.554 368.104 379.619 396.625 379.619 cv
425.147 379.619 447.018 356.554 445.477 328.101 cv
cp
.298039 .270588 .270588 rgb
f
402.885 274.764 mo
382.556 277.282 li
393.028 285.126 li
402.885 274.764 li
cp
f
395.951 379.619 mo
409.244 379.619 li
402.397 369.257 li
395.951 379.619 li
cp
f
459.683 327.164 mo
458.141 298.194 433.771 274.709 405.249 274.709 cv
376.728 274.709 354.856 298.194 356.398 327.164 cv
357.939 356.134 382.31 379.619 410.832 379.619 cv
439.353 379.619 461.225 356.134 459.683 327.164 cv
cp
.376471 .341176 .341176 rgb
f
445.45 327.164 mo
444.333 306.179 426.679 289.167 406.018 289.167 cv
385.358 289.167 369.514 306.178 370.631 327.164 cv
371.748 348.15 389.402 365.162 410.062 365.162 cv
430.723 365.162 446.566 348.15 445.45 327.164 cv
cp
.298039 .270588 .270588 rgb
f
371.901 335.187 mo
377.092 322.053 389.632 312.917 404.768 312.917 cv
422.718 312.917 438.391 325.761 442.93 342.892 cv
444.824 338.098 445.748 332.776 445.45 327.164 cv
444.333 306.179 426.679 289.167 406.018 289.167 cv
385.358 289.167 369.514 306.178 370.631 327.164 cv
370.778 329.918 371.216 332.6 371.901 335.187 cv
cp
.239216 .211765 .211765 rgb
f
433.323 328.101 mo
432.46 312.179 418.822 299.271 402.861 299.271 cv
386.9 299.271 374.661 312.179 375.523 328.101 cv
376.386 344.023 390.024 356.931 405.985 356.931 cv
421.946 356.931 434.185 344.023 433.323 328.101 cv
cp
.858824 .752941 .466667 rgb
f
426.507 328.102 mo
425.773 314.557 414.172 303.577 400.594 303.577 cv
387.016 303.577 376.604 314.557 377.338 328.102 cv
378.072 341.647 389.673 352.628 403.251 352.628 cv
416.829 352.628 427.241 341.647 426.507 328.102 cv
cp
.929412 .858824 .635294 rgb
f
410.023 364.419 mo
389.766 364.419 372.457 347.74 371.362 327.164 cv
370.267 306.589 385.801 289.909 406.058 289.909 cv
426.315 289.909 443.624 306.589 444.719 327.164 cv
445.813 347.74 430.28 364.419 410.023 364.419 cv
cp
446.676 327.164 mo
445.523 305.49 427.29 287.921 405.952 287.921 cv
384.614 287.921 368.251 305.49 369.404 327.164 cv
370.558 348.838 388.791 366.408 410.129 366.408 cv
431.467 366.408 447.829 348.838 446.676 327.164 cv
cp
.858824 .752941 .466667 rgb
f
406.813 328.104 mo
406.7 326.021 404.917 324.333 402.829 324.333 cv
400.742 324.333 399.141 326.021 399.254 328.103 cv
399.367 330.185 401.15 331.873 403.238 331.873 cv
405.325 331.874 406.926 330.186 406.813 328.104 cv
cp
.239216 .211765 .211765 rgb
f
401.395 303.659 mo
401.328 302.419 400.266 301.414 399.022 301.414 cv
397.779 301.414 396.825 302.419 396.893 303.659 cv
396.96 304.9 398.022 305.905 399.266 305.905 cv
400.509 305.905 401.463 304.9 401.395 303.659 cv
cp
.298039 .270588 .270588 rgb
f
412.09 353.522 mo
412.023 352.282 410.961 351.276 409.717 351.276 cv
408.474 351.276 407.52 352.282 407.587 353.522 cv
407.655 354.762 408.717 355.768 409.961 355.768 cv
411.204 355.768 412.157 354.762 412.09 353.522 cv
cp
f
430.146 320.882 mo
430.079 319.642 429.017 318.636 427.773 318.636 cv
426.53 318.636 425.576 319.642 425.644 320.882 cv
425.711 322.123 426.773 323.128 428.017 323.128 cv
429.26 323.128 430.214 322.123 430.146 320.882 cv
cp
f
382.362 334.711 mo
382.295 333.471 381.233 332.465 379.989 332.465 cv
378.746 332.465 377.792 333.47 377.859 334.711 cv
377.927 335.951 378.989 336.957 380.232 336.957 cv
381.476 336.957 382.43 335.951 382.362 334.711 cv
cp
f
386.112 314.71 mo
386.045 313.47 384.983 312.465 383.739 312.465 cv
382.496 312.464 381.542 313.47 381.61 314.71 cv
381.677 315.951 382.739 316.956 383.983 316.956 cv
385.226 316.956 386.18 315.951 386.112 314.71 cv
cp
f
418.752 307.071 mo
418.685 305.831 417.623 304.825 416.379 304.825 cv
415.136 304.825 414.182 305.831 414.249 307.071 cv
414.317 308.312 415.379 309.317 416.623 309.317 cv
417.866 309.317 418.819 308.312 418.752 307.071 cv
cp
f
428.058 341.795 mo
427.991 340.554 426.928 339.549 425.685 339.549 cv
424.442 339.548 423.488 340.554 423.555 341.794 cv
423.622 343.035 424.685 344.04 425.928 344.04 cv
427.172 344.04 428.125 343.035 428.058 341.795 cv
cp
f
394.863 349.989 mo
394.795 348.749 393.733 347.743 392.49 347.743 cv
391.246 347.743 390.293 348.749 390.36 349.989 cv
390.427 351.229 391.489 352.235 392.733 352.235 cv
393.976 352.235 394.93 351.229 394.863 349.989 cv
cp
f
96.8298 213.231 mo
92.1678 210.365 92.119 208.14 92.9534 205.891 cv
93.7801 203.662 95.1689 202.236 99.7892 204.959 cv
104.52 207.747 107.803 211.943 107.012 214.291 cv
106.214 216.661 101.605 216.166 96.8298 213.231 cv
cp
.905882 .607843 .411765 rgb
f
94.0632 222.99 mo
89.0934 219.747 89.0194 217.424 89.8802 215.124 cv
90.7331 212.845 92.1896 211.433 97.1166 214.517 cv
102.171 217.68 105.71 222.244 104.894 224.656 cv
104.071 227.091 99.1636 226.319 94.0632 222.99 cv
cp
f
90.2636 232.775 mo
85.5009 229.557 85.4876 227.137 86.3853 224.712 cv
87.2745 222.31 88.7297 220.792 93.4503 223.847 cv
98.288 226.978 101.614 231.613 100.761 234.15 cv
99.9004 236.713 95.1466 236.073 90.2636 232.775 cv
cp
f
105.172 207.52 mo
108.995 207.871 109.618 207.073 119.972 213.821 cv
123.807 216.321 125.238 221.19 123.47 225.504 cv
116.143 222.296 li
114.609 226.039 116.923 244.185 112.036 241.713 cv
106.422 238.875 96.4519 235.414 92.5527 232.601 cv
90.0674 230.645 100.449 207.086 105.172 207.52 cv
cp
f
121.44 209.564 mo
126.013 209.635 129.417 216.747 129.119 225.137 cv
128.833 233.199 130.816 242.542 126.677 242.714 cv
122.477 242.889 113.06 233.6 113.031 225.321 cv
113.001 216.695 116.795 209.493 121.44 209.564 cv
cp
.929412 .72549 .517647 rgb
f
250.449 123.469 mo
250.091 120.764 248.521 118.655 246.943 118.758 cv
245.365 118.861 244.375 121.138 244.733 123.842 cv
245.091 126.547 246.661 128.655 248.239 128.553 cv
249.818 128.449 250.807 126.173 250.449 123.469 cv
cp
.352941 .286275 .286275 rgb
f
247.081 107.773 mo
237.624 111.751 li
236.829 112.085 236.454 113.02 236.787 113.839 cv
238.044 116.928 li
238.377 117.749 239.293 118.142 240.088 117.807 cv
249.546 113.829 li
250.341 113.494 250.715 112.56 250.382 111.74 cv
249.126 108.651 li
248.792 107.831 247.877 107.438 247.081 107.773 cv
cp
.517647 .223529 .176471 rgb
f
266.981 120.373 mo
266.193 117.757 264.307 115.928 262.77 116.288 cv
261.233 116.647 260.625 119.06 261.414 121.676 cv
262.202 124.292 264.087 126.12 265.625 125.761 cv
267.163 125.401 267.77 122.989 266.981 120.373 cv
cp
.352941 .286275 .286275 rgb
f
268.778 106.353 mo
260.129 105.709 li
259.401 105.654 258.796 106.247 258.776 107.032 cv
258.703 109.994 li
258.684 110.78 259.257 111.461 259.985 111.515 cv
268.634 112.159 li
269.361 112.214 269.966 111.621 269.986 110.836 cv
270.06 107.874 li
270.079 107.088 269.505 106.407 268.778 106.353 cv
cp
.517647 .223529 .176471 rgb
f
257.604 120.778 mo
261.048 126.774 262.402 130.635 260.118 132.19 cv
258.693 133.162 256.451 133.011 254.65 132.662 cv
254.622 132.783 li
254.622 132.783 260.28 134.818 262.796 133.356 cv
265.286 131.91 262.771 127.622 257.604 120.778 cv
cp
.823529 .458824 .345098 rgb
f
247.599 137.866 mo
247.22 140.416 li
247.485 140.543 253.821 143.512 262.553 140.005 cv
261.97 138.937 li
253.959 142.153 247.659 137.895 247.599 137.866 cv
cp
.34902 .133333 .117647 rgb
f
259.264 146.021 mo
259.215 146.774 257.703 147.281 255.887 147.154 cv
254.07 147.027 252.637 146.314 252.685 145.561 cv
252.734 144.808 254.246 144.301 256.063 144.428 cv
257.88 144.555 259.313 145.268 259.264 146.021 cv
cp
f
390.247 218.478 mo
386.081 221.437 386.59 223.422 388.031 225.352 cv
389.458 227.265 391.273 228.412 395.431 225.585 cv
399.688 222.689 402.073 218.666 400.654 216.645 cv
399.221 214.604 394.513 215.448 390.247 218.478 cv
cp
.929412 .72549 .517647 rgb
f
384.89 210.031 mo
380.497 213.353 381.004 215.427 382.486 217.4 cv
383.953 219.354 385.835 220.484 390.224 217.308 cv
394.726 214.05 397.287 209.677 395.825 207.601 cv
394.349 205.505 389.399 206.621 384.89 210.031 cv
cp
f
378.445 201.651 mo
374.263 204.932 374.857 207.088 376.409 209.169 cv
377.946 211.23 379.853 212.454 384.033 209.321 cv
388.316 206.111 390.635 201.694 389.103 199.509 cv
387.555 197.302 382.733 198.287 378.445 201.651 cv
cp
f
366.988 209.912 mo
363.012 211.849 356.727 223.765 360.388 230.958 cv
363.906 237.87 377.885 236.313 374.555 229.083 cv
371.086 221.55 371.028 207.945 366.988 209.912 cv
cp
f
383.564 204.861 mo
382.591 204.578 378.122 206.819 370.506 207.805 cv
365.161 208.497 362.446 215.576 365.973 220.597 cv
370.372 221.04 385.661 214.023 386.878 211.532 cv
388.207 208.812 385.684 205.479 383.564 204.861 cv
cp
f
142.149 167.528 mo
142.149 167.528 137.743 179.835 131.078 175.411 cv
124.414 170.987 134.3 161.788 134.3 161.788 cv
123.193 158.385 115.885 173.723 121.575 181.05 cv
121.948 181.53 122.354 181.985 122.783 182.419 cv
114.648 200.766 100.938 221.343 85.2488 242.711 cv
82.3193 241.647 76.2725 240.633 69.1368 250.845 cv
66.2117 255.031 65.3312 258.51 65.5835 261.176 cv
65.9042 264.564 70.8927 264.917 71.7342 261.62 cv
72.0265 260.474 72.8956 259.077 74.7488 257.408 cv
81.3283 251.484 85.9041 259.873 85.9041 259.873 cv
83.7174 269.61 li
83.257 271.659 85.5384 273.297 87.2793 272.123 cv
96.2529 266.069 97.8038 253.922 92.0213 247.097 cv
95.0434 240.068 111.464 202.874 127.689 185.796 cv
133.792 188.543 141.393 187.439 144.982 179.274 cv
149.964 167.937 142.149 167.528 142.149 167.528 cv
cp
.698039 .8 .807843 rgb
f
122.783 182.419 mo
114.829 200.359 101.538 220.434 86.2843 241.293 cv
86.897 241.414 87.4477 241.577 87.9118 241.745 cv
103.601 220.377 117.311 199.8 125.446 181.453 cv
125.017 181.019 124.611 180.564 124.238 180.084 cv
120.026 174.661 122.941 164.854 129.242 161.502 cv
121.169 163.151 116.807 174.91 121.575 181.05 cv
121.948 181.53 122.354 181.985 122.783 182.419 cv
cp
.568627 .705882 .709804 rgb
f
144.146 168.144 mo
143.112 167.589 142.149 167.528 142.149 167.528 cv
142.149 167.528 140.151 173.098 136.814 175.395 cv
140.385 175.234 142.99 170.643 144.146 168.144 cv
cp
f
130.353 184.83 mo
129.9 185.307 129.447 185.804 128.994 186.311 cv
132.326 187.472 135.963 187.477 139.099 185.871 cv
136.219 186.52 133.132 186.081 130.353 184.83 cv
cp
f
86.3805 268.644 mo
88.5674 258.907 li
88.5674 258.907 84.6628 251.782 78.8867 255.345 cv
83.1647 254.889 85.9041 259.873 85.9041 259.873 cv
83.7174 269.61 li
83.257 271.659 85.5384 273.297 87.2793 272.123 cv
87.587 271.915 87.8642 271.684 88.1545 271.463 cv
86.9938 271.176 86.0732 270.012 86.3805 268.644 cv
cp
f
68.2466 260.21 mo
67.9943 257.544 68.8748 254.065 71.8 249.879 cv
74.6834 245.753 77.3834 243.479 79.7774 242.281 cv
76.8148 242.912 73.1479 245.105 69.1368 250.845 cv
66.2117 255.031 65.3312 258.51 65.5835 261.176 cv
65.8523 264.016 69.3945 264.714 71.0308 262.925 cv
69.6741 262.79 68.4033 261.865 68.2466 260.21 cv
cp
f
98.2066 223.792 mo
103.209 225.488 103.286 227.616 102.422 229.967 cv
101.565 232.298 100.101 233.983 95.1444 232.415 cv
90.0699 230.809 86.5228 227.521 87.3393 225.085 cv
88.1635 222.626 93.083 222.055 98.2066 223.792 cv
cp
.929412 .72549 .517647 rgb
f
101.047 213.784 mo
106.381 215.773 106.486 217.989 105.595 220.395 cv
104.711 222.779 103.174 224.467 97.8865 222.621 cv
92.4623 220.728 88.6385 217.144 89.4809 214.641 cv
90.3313 212.113 95.5718 211.742 101.047 213.784 cv
cp
f
104.988 203.516 mo
110.101 205.528 110.143 207.85 109.213 210.385 cv
108.292 212.897 106.757 214.686 101.69 212.821 cv
96.4978 210.91 92.9003 207.21 93.7805 204.577 cv
94.6695 201.918 99.7447 201.454 104.988 203.516 cv
cp
f
117.105 198.804 mo
118.015 199.32 119.556 204.266 124.293 210.639 cv
127.618 215.111 124.298 222.266 118.026 223.29 cv
114.536 220.344 108.777 203.895 109.758 201.184 cv
110.829 198.222 115.122 197.677 117.105 198.804 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%For: (MSI) ()
%%Title: (1911.i126.029.P.m005.c33.video bloggers set-09.eps)
%%CreationDate: 2/26/2021 12:39 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBjVOqoD&?jT9&Fa*[iFil(4Y_!0s(1Jfs!2ifFQ[8MW#UY29K!fD_tRm^[A"@95AoS"19\V9c`RqNutj]\dL*CX)I`s4:FD
%bH,YpC)Ks&:J>HUm99r+cYEblB7-tY?g0G\Ap;#W=1h;+i7IpNB.['WjYep,mQ#[TAj1J4])ORMYIg&mW0>so:Wg)V=8(AX\!sY.
%)?KLEWr/^r[@dQu9Q5!Wh#PfqfBpFGTP`ug?n3>f&k@`'ihp;&fs*65@ps?OD8:)]=9p7'S+odsc_$Q.RG>4s]05diDVOR0r$HNm
%Q=986_O$[bGNSVa>reKM<!kg4QSR43j31g;+W[Ro_&sRXRX4%%bROZiZbl53W7^#Ur6-sC`fU/cmh`5>/dkcb`\?@eXt$Z,%M5p:
%K-]flrDpgQ?Zq0&&rR`TNE4m&H:2XgC0;4aG.7jn'7U2)JV[9IL$;(XZ*76_b$#ZUrQ-T`cPig*`$sQ(ReLkToA"Df?<]-PY2)7B
%r=90p@kp_PJId'LYPk>$lb]SPJiT!#]7/;2"#cn=jgn+?&OQd$<$dR[p:8cYT(_J5,hH5>eq3?sobop[0+SqeWD<.j?Lu6f9*8I>
%&5AI#A9aD%).m&aL1uA`&/G1R4@\Y0=_n1E#hg%b`dQe,]lreUem)^@ra6H"A?0":7U-F_dQ_J#CWHE7_*9eVR!?++21r.iIT"gX
%8W/nj4iE@Rc"b(5+9ah$BAS7aJ-a^(F7jDB#CQhOoNGuV"?:\g6\S\W)npadQ2Jokfrt/.bH851CMc#Vr7e[rF&i7ibJ:@9?:KCU
%PZaeHKATh@elitj+!_@27+?a?QC:%N]&/B&/Bal(EPLp"h0+Oe#TMQurIAfkQr_]^(A,3,;mcprD0_C![6eI$g:s@Im&MsKmF7R,
%9b>NcGCTJV9DES??LN$JTV;:,f)*W0fAbbcf<&<M\#H$M]@FAE-,0o+>g;W+IY0kh#uolOUUFA-k.,r)qel-0m"a2oG!a-i59lmG
%+XJZK1(/!5?9<);Xc$@/PAg1V(RZN*YD94jq*+-orZ-E@2,c4;$>R2`f9GkElr=eamgujqX>@i/Ksc[."CKGP0*,NSeJ^.*#e@[T
%bi)>6A8%laRYhsnIl1""HEGX%>E;/F5n[su\p*qMe+HTf]#+jaDA\Cs?\N`&i+lcc:\THO40(6T8&u\DC0`KU9u#(Ba#%j^iO1kc
%:f-^:C=53FRhiJ9.kA)IYtVkL[qT&`[orlt\<^8[(7K7V%06s6/tGKUPga:q(s>/FpgBd3M>rOMUQgH`T!;Z'^U6)k/9iLK]m]4q
%m9:O=D\_hs@\HaL(UYH>7kYcLZRC]Sd4+49`F?A[0!Q$BR3emZ8p8=--WeI>cQ%@jSc\o(I4P#86%+nBF0Wc:[VTV3H7XA9H45+A
%G^,'4Mi8\d*ukkT-$\oD(d*`jT,^!(N#Wp*Ns0U@a+-[8LVj5#]R:0"$W!H)%h=el.H#^O6B3+b@)F5IYmMg?7R<r-(Do8<^'kNI
%%D+7R@Fk7%4pR.4\)@pE$Q_*B^n^(<T#%2`[9T+H?_f=F\QmG%ff>2$i%]:B:5=Vf=AEq[:?hI(Vs(oMS@k&,*635UA&2Y9#!BK7
%*Th$Y)4hI7(C(=Bfo@Y#b;O2>*o5s:K1?Sd5VF8?p+;Y,?9j:_&Ps&6a+D>7ShbsO\,a0(PrsUR2.4uNc!Na-%Lb?.paIDb-uS"K
%#I#-+'![fO*$Q.!HdJKQ\Dmp?-,PtC0P(Gj!rN`=3taJ=iC2b%7/0U2!:6'Z4HogJH,+r)(^O`7F"bt3*Aq2o/^.1-^hcH?!+^+$
%)peTTJ7Voq`@Y\fJH^rcm(DSM[L(obBpcKR9o*h?/W3(!aI32FK3T:KTc;e6oJ3XP6-nkWDX3U+lFIIQX)#?Va=6U@GIZQH2n7-N
%f799I^_/XM%s5j6`kd!T"%*-JBJ=,Ed\&*"Wb[IkDVrlko7,e)%!\M-qm`C%hBhXPJa[E/q1/2Ns7c`3M%b^enDJ6C`\MOG8TH1@
%d3fPhTGpc]pau;BEipF3P5c+96]78ik^]RfX6D"Z*$;3i:PjOd8`^YC&!.Iql6coaEWpD"2/&t](3#(D)8IQ>-hn4^"We+47e05M
%rC#MaRlTCKa[*Ap,8d1i.W1C[nl2%,S`Hiai[tJ`#a;KK`r\G7n0"p":mo_W!cT%J*@_T\4W>`-s"*.rW.^\>1]#.J+&Sk,T$5Ts
%*"WcTK`$ZoJe/lN!iP=R"1KJhQK]h1hgu,hH30qu-63-)7d28Q/q@cm9!11Y1hsZckrP&A*%D%"<s2ZLJ;biE'-g3U)N#dWjd-(1
%P_]]f5\5kL(26hqM04=i;HbrnG_%Q.A2ah$Ls_r]dG),1Mho9\PY+UmNY"9'PgY0#Ki%C(C?C)S_Cuj\h'B<t$C"aaP$=+3"<Ne8
%&e2s!,fqIX.*_>Al=%L215N^F<N5ur/I">2TpRq6jQO_7;kU%e*bid?pa@E/s+oJJYps27?m%1SD3J,f&bM/G!IE[fUPDMo,NI"h
%Oc_8KinUh+3].HG/cX;a1$FbZ80Z;M?#ZXM3%6qP'9j;\aH.jgLXH=6)E8!D7:J+Tft8s;1[$RX+U+U(H6S3RJKOF(W<\A*89J6"
%*$jbslhH_70o2AGHK<une\!(*1[21.+[q3uKHu,u2ol.dH)5B=6S=OD]0L]#0o9mE6GClJEqlqc;s?'d,c+&[-hX!(>0d5;b_80Q
%!Jrh0`dfBfO:.Pf,>T:V+s(,[GCq:qLpf=<-do7nPiG.^U_1Zjd3V;i5T5jnl^[H\&oMR'B:eTo,+LC)P<kQJKSphp+(l&6Luuio
%IO<=[VE*^']:`1XK.&P(q?BV0/V4F8-q?1jM"UtiSH7L/J8Q%m'o\9V<"<_GJSZ9-4^_I#L^#!D!omjEh9:HC/:\Hefjt^4#-=[(
%M+g`c!dm0:]U_004[njh@#Q4'%+nA]nsQ.D"_^j?4Jb/b9L[=6AIp[&%&sD<:!gWV['0YD3"Hq<#^X#i,05:W6f/A1GhfVUKmoSO
%!\>&kjM8khJ?N71=?rWp5R03(,(^g1qSc@3"Cji^7SuDd!YYsj/j!V])S"Kt]j)%l,!k6t<45=%ql)]Jc8h&TITd8[2UQl%g-b'5
%epf[(LJ^41H\1O2F9h[i.6idb_l4`QIuO4IrIH=?%N*In_mlA#%hofk*ro+/F2BV;(sWQmr.*Q&4>Dd>qK]s!/=beU'UEK:Un!:b
%+'OtE2IMM.JoPuCRDn;+;p/Ro)_,8cqW'\[nf@'!kQI-#,/QYU%3J:5@4f]X6`^HK$9fTE$(W!_TG_@b7cN8'ULnHjq-oRt#Z:q0
%Voo%)`.Rl4'+\])i^*ALO^X&>6Y%0kRta1JT]ug5"rIMT*gF4\LIrej0Tp#kBbY#'_$%ae<<OcX<"Mqj`/VSE;_Vkn!i8.*Gb>`P
%[1F4/Ufrk[TjKfNocOtPW!E[Q![WD4!Ykm;$;qWXGt+<'L/](i2G?_%#VmH74rdHC3=<=]2lIG5AE6]:,c<CJ.WZg\=*f#;lN0Jp
%%"1ND:>V)+N.,=2"53sVIuqO@B`M10)@'st##3!S(LW%4!.(O"//1R@"DJF%])XR<!+nRG^7Y7SoZpB"1RA"S#3@*+a#IIg#Fs.7
%%-%@WJ"Wb^)NKUUqKX2"Vu3r9RNHM2!fA<F\q$Y(jcV"H]!5#d#e06U1e!;ABe#ajd$p7.P#<mn3fr^Di!6P.:fjTKKJ`R`_TM?u
%)?W\Cnr><`q?<$7l.f)!JCXb/"*uJs8",Y&#?6cJ:6\iN0/\:@!R_#O2#Z%C_r')jM`j1MoGD45hR"[6%s8AhW&XF,J0WK"Ot.hS
%,"G+g7.R(I>g<uPTMF8im7.b*#B65"2BrHsL4%!k]1h-4#Ip`=I"Z2_'0$5>64#W*")i]W%ckle&#B="%A:-3oI[rL3Cp:VZC2"]
%>Quq2_7:4Er&d"NP,@=r\5Gb7WUc^T*FL/oWlP=@9*aX<Q*jL-*3pcbjCS0n:qAe\ZSP4UQRJ\ja`PmFPX`,1IBHM+=/-IJ;5MAT
%Q2348E]6PV;F5b5H5Bg,R0"I(JBRS/R/DuBH7AC?TBqhW`uO%g8j#R7h\%4IPDNX&897]R.7jL$Jcr;Om=F>>Q-p&'^pu-.CrR+(
%j]F"bM5BKJRSG3oJco@CQ?"auPakFe"fXI/9YhTOrs^e*6I@!1$br%&H'$L:U;)8N855ak3dRZrVPGO5EPI-p7?qNi8ch^cduolm
%)Ctj.BUYSDcnqkhVPG[GkJ*@`5gsL>W2/]Di//J`qVop/KY\^nIn&=NJ2*bUOS.ck];_/E^H?nU<Nala\3"Rcr1$oB^Y\GI]^i*E
%I4j)#\<G0Sru1LZH=l]N7_K+8Y.3;*]6;ooHC^nV1).s?gMVM/b!iF=D0nu,_)&.Hc#3/"roj?uAU!oi&TG+]PZ^/&7[rS_69j7O
%:R1cZX*--c'Pk8h=UGA+at6E^A1kOKq*d6]Ck@8&RSK<nr0:_4InfYOI\iFKYK9K^[s`:uCYCN,W+-)uNZhdjed_#"NLs@URUU#6
%BMrpCBmX3'PPFo5SWPCs*PEmKQRKP;DCX,4,.kP^Bs6q^/)GO;aBE*$&iMqY$&tQLg["LsC"-ZiE)P/!qM3m1[kc)i`MV.YEk(Eu
%%IYW9:MOotr2c@#`a5M-r^\oGGi=JsKremHT@U!rn]G_;HOhATNJZjLT2O@$RK:$8#31uEG;N'/`.i^u*@=)sh!I+>P((TLrSK&;
%',@'USQBTeP.-+``_r"haJ%L,=1g,qGs0E2;GCianj6Q441%R=Kt.&S;38+>IK6E;mjte/O6i`]1@rS)\u%0VOe"4fm/@rdh-&J9
%?b$*XYBB!4h9a9fA%Orb\J0@%#%P7ZH*MX.2\5<<U"qi<Rtl0:O&>-'O0fDQ5q:V$.m$mXS>-H%XuO#SRf$ujn2H+U9d,'7'XAR'
%BhI9R$49e\;J"u@2#eFX^?mfU+"9<sQtni*9'VV83$*]:X#3E5bCgtpo%\,fQc;kBb"g6ODl/nd>H.654hSc_`N8'Q-T*KQN=rVN
%XK&7U<1P:[3j!][%=p!H]n4ipV3k%XFAe<ClTa34.HgkrDV&a'N/;,f8PKL:\aH=tNHVAQ)I?1'7ZP?[PFC#]D^@TNT]]B5KCP-u
%QCh8qS7662hK^Tc?Bq"Ib0.#3Y%<t,5ICpt>DLPoHQCF[NLqMF9]MZH"Xb5*\BS2%Pr5#IBOAcD\U*SYrOig)6tR[lj8l;MmmiB*
%GYFA.N#/,9]M@c;]n9J3g8:@bF^hOGjtF0u?Dg_CS,(I<RVj-bj"c)8:6\J$l7]!P9Y5bV"KB,KhC(P[&,"WB,Vl8l$`$<1?B30q
%`JK/"-K]KKR"LuB%f-='J/!&A[5+,:K/)2(8>C5Z-`D(AG--,=n@E<ba:)7me1UdNgW&OsQ'nq?.HK\WCF!P4+l\rtSWsrF?*A\E
%+YkFUJh'>G?ULEg+oe$Ia=5Elbh%s>CWOCi11*EJ'2tC(+]%bL19Mb3.8j=?2<=QOo'`4$Hjt@HG1Mbs"3"8NY-"Vo7d'*W;jp+C
%nsmmNh0?YO4C:%][SN@/,H[N-of?EqDh:4&9Z(?B2($:Y^Z_Mkj/6#"UV]i8V1PnQ9JOHa$53drdV=M(n?CBO5`*o&o,:N*nm;2%
%I+u$W8f"%>h)F_e<f-P[1.nNYoXjM=[$cPlL2<G)Rq.8tS7fq*)7"OBm%8<*$?(*Z-C^_dR>b(qceG&C>R)q0>6in_487?VeGQo0
%?#P)?Fhd<%8$7ito4J`0R[#(dl.+arPkh1YfngSS42m`Fs4&%$<&]\g,q#4[.FomZZ'4V@YiS)0&.17;P_Pc$[KgAcP;=][jMOqE
%+$)!W!`;SeO.AJ%d+3^]>c21_NC<,@Q)PNL2;6Jc/I69u28Q664Rk1&]Z_$Bf,)bYian^+R3u>'M3n6Ci^K\HAE$$h@4;.2:V9A@
%"?K>k>UT%s3E:<FpA%BV!pNMb4>WNo\tPHjgmmE7f1N?m;auu#9XB.U7@HjRVZ"Ah1m^AL0<CP$3Qs.XR*`e"n$&:1lhC_RE1`5q
%hVEBk,P1;Dj#G!bD;(!0r&1J;0TPbZS>Opu?8LB*H39SlTZi@3SDW=JZYjco#$pCN36cA\RTP$W]Lac$9f8?,H,8eR])f*[9fIos
%Gf_I#ekJeCoOZ.f^[O]Hdt04^6XCL^2h;iOrl1GD9Qb3>(_q\Imf9t.GC\MVj@tLJN6\W?R/@0Gq6_#;V$0af9f7pXX%q%,V3s[h
%n"Vp0pZ$uJ9(:0P3aNW!U$YiYD?H7DeKlSeF-P;5<V)Vr[<5OErMnXY\oq8$/!oQ>$1_;<V:PUQVI`^%"2E9T>E\(p`HNaidE[[j
%V4>l5Lf#$-D^M=E`bds;46C/[Q4_OPbhP:ITN:A`\5iQAiF_>_g"nZ,Zg[P`H'.AsiTqUN:TGJt=8L0;e^(Gkqo:M(ku[^a2t4&9
%SjK!lg0pu<r"b_m\kc7G>3[G>[r^$sS[iAeeXjSd]l,8%e'7N-44gu<keDAucJ0k;%B!n-'E.WUbYO<r@g[^7K)@k#"O3.dJ'aCK
%qEo;p'BIV^88`m.I#9N:qulifg;j!qo'%uko+U2+j#B7hrZ<hSo+U2+gGlgRE>C@OIrEYEH=!-f@BXm<I+g"?B6;2\d,U1I@O=+p
%XR0'"DZ,i-9+sP4H=QapCjm/j`D^Y!O*^3B?JTCo\Ij:&esMs+@COgiN*:$j*6>s:8%!ZClbaC4-Pd/e#\fa@`ZE4WO&WHC(S9-P
%Z<E,3e5Nj:Q.t0i*jBFK,GKVJ-YuDp9%nB&nqIOsV7>,b-?M5jB^-K/.>3YPmGE3\^sq]GWAe!b:qLefQF*'?m-9%HpF9=8DDcF?
%]VCsB`Q+T8&N<9!Re]$#<`1nE;h%BYb"]Alj3M;)-8M.*J*B)^,c-!F0:B=iHgCY@^WjP4aYj"BWE0D9P^inR!9*&hKA#*LE';oK
%4fbi(RM/2tkYK5*Q/XXZX@^g`44H2`@D>%ug>uLbK)(IAUN"gJ9gda)aA2;"MA/9LpheaWA"rUK[7Rp\X;oH[)S&F5Q5(8hF48fY
%CX-OUAi"W%Q!&R1RmSUB_'?cdD7A1Y9Ci@B.HL:DQhn5c6%c/_H<eedS-_D`&o"YCoK;e$N&n?-/Q].%,FlNlYOa?3IqFW#*u_tT
%H?g.:(5<.g3Z(5to`\\/PJS3-^[:,0]^=ebmej3bk#^,.AeKSA5<[of45]7k@T$Bu25#H5d<B=ol_`Qbg@cHaNt_pC9\_&R^<[GC
%-V)NeZg++3R]11UCjRb[m2"/%ON#C<:3/<l9ZjJ:HAu7e9bToA$;YD?jsWA0hfP0A7b((.Vd=.bDMgM,.rN&+l_b&[@RVY%.C]<*
%rKVsui)FgSG"VKrQCQHh5`k;LRP"2M[9DnI7OlE2(kkC+B;7m&O53UlYPXNQ72dNt:8+?T=#BpHA4i/[C4GNMm5NH1>:Prenb=nS
%&@YeXUp;n./eKo*#ISI59$5E34dmioR$$IsobJG-WRLCm6)deC0?hFc6DdP4I]QaY^,4RunWhk?/7@`5D;+d2cq[IY\[^l)keD(I
%CQ\aCmB)asRJXlWQblh<kq\S,"`p*$bM6d!6W"JbPVl*tbCuf2b20'i#6.%7Q3%5,[p&*o=U,3>:<EU?eum(Bc?>HC7kU*ukjAko
%h7E+ArcsBDR(;AVm@)@iCVCK2QtsFHk*p/#l.:=,ckaVWaNn$IeU*HY\Oj&S]#e3%l!?Fc(7`lr<d:(tUq*[=K%G.@Rm`\s,no''
%,5hW5$VW03:l;bi?qS1"L_H2J#egki8Xf$\2r%Q'?U&\X]ZOcNAlHC9F4Lh+bkrpc1`&&EqlNdUiR4\Eo)@A,T(\X$lSEq1<:]G*
%CFNV2h<Fo2pBG;6DGiSUJ#2g;Ws!fQb5?D5.@>#P3pRXi3*&^I97`gOO.2Q'C)U"l3CES6C)[+F0oc3-grJ(AC\,#9cSn;lQ:/dC
%Di.6U)>pslS4W"@ftL9lr^+o_*;%@t@K&U=fGs$,jIE.pR<knnIp;Sqc8a*Y&:C$Bn'#VJR(nK!L?\4u7krm3oNQN#r6\4Io*_:i
%eS*a>XVrY6FO%@19T?M>hl<@u0]/lb?^FJHnFQC+h;n(lcb.D<G/AiFUWcFq3\c]GDHs8dZd*IP2s]f71K-t[lM$sIRDb?Y5T,m8
%ps$:"c8-Bfl=\qSN(/\G\+>Que3l5OT@'l]5Xm!C*9J,uWJu19:$1UVNHn!'g*ec'BZr7NZ]`__DGiqKeRW8=UN$D(U:;p:;/g[>
%-/Lu)jC_DP1)uT+DlXN1GMgk.cZDj]s4&-67=+l#!E<hc>/J9,2PD(3.eQ9G(Fqq=4bKrWdf,O+@SP:+T"e?8\dh?fZm17gFSMq*
%SF\Zibi?B^]JkoGVE*L+iNg\f]pfT%h8#@;cQg0WM>1!8'VE3t0?($T!T-#tRg4?4J8\7djoJhH(l@(EJFA4u2h)Ka/>j]69Z2=U
%]P/GI4T'%5CA0L_4[5)-+,TPj2T8_iq7Cf^aG$,S9q$QF:Zf%0j`eIej%jrpf6m2;>`I"YfH1ZjBieV".=7F/N1MQ'Ij_,'!U!j>
%F&lm.F%?o:b`7'Hi724b9#,*7eLNRt)(cS99tdX+E>W=Weo11Q@#>s01Un'bK)P]E9&S2keuT^[).1Z_EB'_Wp75;!IMl0)VOIMG
%bF;p$;m=frR*IOPRJNb?K,!WdKaYBCo]h3<h5d?p)%BW7eGO>9QJAW-^VMB5[Pl*.Vc@pk?GgQ%GMUhDR[f*?c)"NWRu'[+b61UQ
%i$1mB*'[m.R)V?"$;RuuS9c->,,[=\2Cc[VB#UMti#??RY>Q"^Xl!%(@bRY'bo9>hnt*$!\UrLsqVQ\M@MZGNS@(NKIjsrcB=3%K
%h2\'&j9XK3Rjk5o<[tdPmtq;,pk7X\-T*JsPZ&6&^.NH6SLcXtC"-omcV8Bg>/dUFG5X8,!l^$lC/SsJVu%tJI6cD,h0)Dm-qd<M
%8o9VuU_JD[Xk((k+0!1,/35L/8eEfRC#UFgEcXe11;q9JFT./P5Ft?dnl+m9S[JDc)Il1S-5P=4cjH]-Gq)lrQ()GtiAPJ2<&Sgn
%:Q=9:>faKs'5h?o#s2!62eaX3R`WcGqI7/PAX`1rWAn\YAUV9+AO^j;YS:gN);L,?mp&4<[B_Y?VJ!pCU82`[B4NYf.]/[6]dPhW
%Gi#70-tt"ahhs8IMt1dgS,$BT.>r>gCd>P!HVm[T`2U4C2eap;R`Wd27m60b;,YeNg83i,mR=,1UqJ0j-8R/Ms#X:rAoUU@.U$.G
%CJ9nWZi/mb<'.bTPaK/-.;">HIrlBg*5RWGeW;D"dnP*R2dOu]rmV=CB$m?LaT9]0h*54m[-5g#eNZ"c"d.EKG%Ro@rgBKRnT+2i
%Y38cV@'8_UMJfT\5g_1E[[D;:C0!]U7kbTB-a3I15.&alL/q=h4HI*Vj58Y+or:I<g%)cRH4PJmdC$9YX/c/uQcZ^`SVt^pgN:b-
%V=(al0ZJ*>B&pE)[pH8/94h$iO*n^V$9rm&M]lH2/nM>'5VS&UE;mZ&7Z7jj0PZ:9*A0g#,Ju?tro(cVil(:-^*CD9[C_4M?ZiOS
%ddXR,s(p+j-k_H1J0!EO^&&[,#Bu2l`#R>HXh#;adP?1E,?R4IkIle8"8IunVT*%>=\C`?Xj[N7F-okVd?nLDC@?4GJH^Q%_S9Em
%Vf)S4$&H[hAj1Xo1=b.KjT3L*oML=9m(4qtjOZBO3f&[GUrHnWhlV7]Xs^-PJ!tiAMk?"5B?((4XY;a42W2&i/-M0O:&LpJB>>Wb
%nGW@uX6D.j^9q;cL>BgYT`rDXW!`Pu(6hRPFP.-?Z5mm&W9ZiUM[*%bbSL-"5LC0Y59HRU7,7GpD5YtL-FdiQDR.@@A8G(Jo]>&8
%`i3=cVZ'q-V=d,Eoq2LpoIE(0a"=l.5hNrqC&gN]a$17"&HFQ?3TTMRV?dNa`ou;pju;rgb%NAs>\WaF:)4p.4"!8JG%Z6)_2#o&
%`E;R[*).gVkKK\NeHnbp=8+53hH4-V7M6D@Sr*iGf''F8nS;<)(3nugl_Z]@6mIR*s.)jRc]N7E?ak!;%M^kq1rW3t*(Ci=:Ri$"
%Y8#Q:UfRq+FugH]k?7%l\pe,reDD?ZdC#!m:*\IhOMg^\qJXI"iV4WHs7U\TQ7-t&ISKonc[[A2e8(>=UW.GRRp!em<bD$?F6coO
%44P:HBI(teV'\DkDEB&C$'UF@?b2Rtd84;UR@8jJAkg/\5JOHB^uQ?0A6(590s%HoRpta&`hr*9(r)qY@\A8B^44[\:Ale))`unZ
%GHY:FEBKcr1K\@+r!H>h12fjiWqpSDo;9Hb0D8%CA\[&?7qnRu3mVP`n&j'M`eYG'$3AM.I%?X4f57.,?#[#%c-t>uVOHXTV43]M
%d)IPp<nfiWH_!ohgL+\7M=OT](Q8%1oNrLS!,h5I^!3N')_XAiEue'&VS@Jk3@67M`@Q"GA;mU>n%&*p2k:*_b>-%;`fnbbS9i`Q
%6=IXrUCp<Za+6;#1=n6EfP/%Nc8EDKV_^s8i_qSLnQqX@lIHl]s/!rm`_'$d+#_]ppieMC8W,_H6W-mY@hhp"Yg1qJW>J.Clag**
%4)-G=FU$n(j2'NOW\qLi&fE3je7n`ik>a6UH5gW^eF'ka`\Kj1b[o8,>l)-Ok.L*U>$%&mFaUj0136XnBZ4Md[$,47/[(`0eEDM-
%i%.["XKY7)m5@$X[uIjj5e"-N'`VMo9TpFNNYQ`lh,E3J=#1S5"#:iWms0?2+"X;s=Ji'eUDm^i],-WKCsVXg@p=s&F)8b]:oTIl
%2Ccj#h:BK<_;]FMD>nK9LCl^QJs?/j+FEJt?KT?+X.(P<CL-\A(3;bc[\Mj@Ou'%s?7SsWUHd<4qGKE29Pe-q75Gpb\DoKnHg\G2
%g%S]j-BmeR'A_ts>JPmsDPug.Q+kB\Gee:3(`+Kum!>4\E>8]%Xp>lLg8\^a+[^e\`rY5a@IgYa<ic1HhJbQCr@i3O3rLJq[/=ee
%Y.<pnY1N?a+c#CrFL>-C:YkkufBUmJ6fq'?I=Q%C\6'7GG5Zq[/^&g@1X",rDT32*8'D*I%#s"&f6!<0'5)V>V-=-_KoLfGV./3i
%1Y#jGHBf/IhnO6h]b8W&K3.'Jgs<qnd;8YbU0-UG+Wibk,JOtcAXnZIk-3HP@AK68G>SHb[.hIR[r;ks&FH<*c9eB3/Vj)>B"GeT
%IABA^;V[9'GqK!cb`;G8X/BdAdr"uKTa.sGS1N"+Q]s.EgZ;bT*_=:TYDkr)Dhk]<`S,O*h-(#;is&5IG)3/HBVa`in.sM*d%_te
%o1ORU,Em(8=lQ5FiB^L:\oEL3rOL[:$1.F%[uRcOT`W-&^9BF:fP>CA'4p4]+5u2mG!2'%nrs=E1Lu'2i?sC'@e)pk?QCR.cs+#L
%#/47mrRLJn?0jK$!B&GRl2;Mfj@[,:!Zd58M1:'d5"F0E*)=.9S"tGn#@.b#!P*C<%\Ni?Nn7tKg=ZurH9e=f[L^RM1'JZCOe9`E
%o.W.M/1%3NjU-cuWRXFJ<3_GG8%UjN]N_p7pRk[6&?[gEh;IkhUraHSA%P$ah[S15qF4'<hfLt\0\;.]%S`K*JhqKGaPtos=J<e>
%*f^\HY`#03*8dpR3Z:]i%4cn[E[r8QV+.N_X5MOoKD[L#%W*4[j>P[&Cdg^+<pIAu=7@0MgRSAA2KDdCI5!p8Zg/+KDM+4_r#O-&
%cq=b2p1\s%r>MbX<.'HoB$]M\8j!8t;74@/GD`AM,43r2kp?IJG(h=ik>U`TlHh09QZB4rOfO\fHPc+2>*P$3Do##PE!U#@/u%We
%6,/8@b/?D!DPXA!6-dZ@J$5:HWpsk)Z\*#H[ApL*/2FAo(=Ys77p/OsSEF\<159i2\6Ah!@Gg?O9NU`'.-Bg`'%`dGpNWcRqM;D:
%XVe@2IEdYEYVW_^0q<oll6YMhT3K<Y`eJ6f1%b_V3-&iQ'p2DERJ4>j__ldO!Y9XUB7:k^*=On+Id>UYN?"h?ijHWh]%tTB>-mMo
%*8t,?$bg?+rYdtkGc=uXdZ9sOf<n"s\L:7.d0VNi.E:GJ0a%I7h^6.`i:PZ"^MhMTT6U8OG"j5Zimh]0f8!O`r\*<:CVj4FqR9[R
%(/#F\gV5ji0"QK>kZe9-1%HaiC4XEkH1PX[(b;kOrbf\n=.tI:;J&s:q;(-+7\I&1^rHjg^i4]u6uEV?ihcT@'l^=iQ*+eLUamof
%PAaT#Y3nTjX4p^#:B`sQ;+NQ^oFXf!UV--^2ub]R,Wj^to=Wtul7WOMH9Lgb8!RgVr7::\IQJ1>;+3R5[FQd7jt]9IcuS35]Citq
%(d4?(*Zp9aA6ac'lkB:f.2tBbo"mWIDP$Zl=Id>+l+D4/eBg^h_aL^iNauQd(*@nh]Q'?&`=U9Y43Pdk)Im`6>3e(O%!%M&RUMRT
%[bg=p+I*WO#%P)2NiD!G0098G>5WKD1X\<%:cURa0Vf%2iNji+$49doom(72AWcFD6<65C2.QcZDEV3hk=g[Y+Ti3m(Q5>7YpAcQ
%AR![h7(i2)qGFW"@p>4fJtnLH#h`t#<Oo0O#DH-l5pjH'Z[=1GTP/_"SSbU41U:P#T:.s6$(tB0%7R_nSY[nFW]M&rl&6[^/DQ8F
%_:Hg\L+CFp)%lWTfhNs=#:sL)b4=dO$OHb8Z73u<!eHar_.4Hh((:[XS&P_W`A,;5A>gVPqC+,0<!)qu2!1hHpW#/C?Z(CTW#2WQ
%N);0,Y>[N$%U3oiWc(\`Y,s5/Ult7:lRN@S*N@o8)MTM##,b^EB,a]'CK-FRhZS)Z`>%oDo>%)/2@8_S-*V;m$n^>=B)OX!2/Y2:
%5.'Ag\-a%$qgVHeHYB[Mhl.&XiX^3[T"UQt<MA=n"ms;H?Arck%U0lVnAgoaFt0V?jjt4S:DTre4'-GY'^C9/*+(]F0hWWlh//uR
%LFRQ!"NW'=:!@ffWS"IX#;]1XZ7m#W"s>62=-Nl[n(,(4&7rC4dWU8f5l[WU)dVDCN%7kAqlOjLcr6urF#C*?k']=aN5eDClkd!j
%Vf'+f'`jLn:<Zn<.,FP$f$Qr'NZ5&6N`0a>.8!)T8PqH2P$rBQf'I"LoeH;=(2C8'r8s9e&'K*AVkHfL_l2+:ksh^96_0VTGcp6M
%?UaT^[cs?ph.ZE=Lf1a=5e@`6jrl8]`htho[5t?bO<%#6\=S>)SI66C+R^dr@4AC<WtA&C?\FK6mI_2-_fYocX_`%66e@(c$cUhP
%0nD?ZkkRKk&I"GNN%O`4UMWt,Y2>3f$3ota??*B5(@)T*ITT1V<Ok`^:l3ItjJNX@hA,GgPj#'Bd\"$I)@@qu6_#GC:in\]Z^H[3
%A7AlFd$"2B\m/XAg4t-t3&qQ2G>aeR.X'BY<j(FO=\(-=KcE+#A5q.!jlc0Q`WeGg7bgj>pMV$fjYOr8b]3"0V,8sX"$FT5?TF'g
%:^Ei4BN9Dt#_FqO9&nOb'psrFoXboG@\G>H1?=&XRH/C)Qp`X'jOeqK0<`+Y[ElM.&FC,X*-O$jJ4VE'=d>IO#52_lW/&oJ-F]NP
%F)+lNmdms"QL$.s[;0\Z8^<3JQY'.c4]+p<>1(UER^A085&nY)T6@n_Xk/@do/Vs1PhfZRr?f(%!4SET[Xh[]'?0Q/eD_4R^4ET-
%;b,Q?@^1l"4<mF/`ZufCAI"B%j,kXU+[*9<oItA=.OE35^;K/>)!W$4rF-Wb>MNQL-Ou3c\6o$/R6C@G]Na?.4?gH'Z.OZJC;(IZ
%ic9g.m;:T/H554,N8GQ"p)\U-]^bF3_fb_PndGE4hF`7'^"'Vp4)`u$;80BLpomS9Z^q!ES*)*`hV.+]Xf&eNZaH@aLV'&C?:C)O
%I+M\4L2g#<3lQ$Vo4@=gk5(G2UWne[<bJc1P-722S*N.[g-M\Sh>I*?f/oH@L3Hau4aC3[B!W#o#Q!/RIXhnsZ+R:f5&PM$h`g4_
%O"8DaL;23ZD'*pS*^@(#ou]_`rk&*;qSRO(:%:o(EB:J7qnb?,DdRuTc5dY*Db'O?0=UY#F5sS(H#p*OD*0F'0D*DF>LbOnL@A4B
%HEu-QSpc&8o(C9(qmEd.7CR4Z5-b;\^-3rGfZs69NFrdZabF3MS\g`b00Xc0n@c>;h7f([Z+o,@*Nn15b!E[aX$,[dq6p(.;Q?+f
%(CM&!aneJE6%AA`s(_Aqj3>HY2s#YCHh?stMgH9+Q&9pFT5'E[B0-p8CSn5FU0YD2FfkB!75\FZGkQ*QrV3mhgGsZN*@J(u\c1ST
%LMj3d\">U#c-!rDj!VJ)X.jV3UaF#pk=j40/)0F\jVeMrX;##`h?)iX6VkAD[H^qtYj):Pg$Y'CQ";UU(]+Y%LCZHSRt^6hHgaSM
%Neu@('t6D1pR[7os5idjgZk[oIX:H=[JR>A!)n2Y4h?DZq..1F?8iHr:\0oGer!q`\()LYID30p>]htHPj^a6fZ%e[r8J*l6:IOd
%mI]hT6%;"G>2E)J2Vs^*b4:8JdT>*?s1l*pKAUI*T0=hYoA[+J-`Wka:H$e)hd1^SC5*sfp@e&hcjc5^^BfVa3>qs'Huab64G.&(
%SUBs\cs?9)cOB-7orXB=.Xl_L4Bm70^#Za8n)ph%2m503(JgXbN\2g;h#@8pDXN>Ha9"Blq85@o<;fpFs7KMJ`0+Zf"LiijN*<RR
%g%P#fBHR03fjUjP."uj#V8lC#XhU'!_NpmbdKt9u2K-6X;;Q,u0A[O]]C2='Q#*eX[X`sjQ65:<k=\#tP>dO;5!YAY/iEmhX?V0^
%>:^TV/?c`@fAO]8<g*tU[8-\FoqUs2gsM$tD\/Cde;U(bT`4i^*J>H,:A^Wbjn_j)4)hk'ie,f[iPIYN=?=tj*YlA3HWft6T<*em
%OVeDPZ*T]WH,5="2HIPX;.O$GMqd-BX0dDQWdXZUnM7TJ-,3Y:S@u-ap@>Ro/lWc38<XOW_cFKh4a@i$DKU/pI*=f>](`"=&C:lF
%_qQ\Z>qUBKfBWlF2S+(?p<Fa"Dh#;)Hs5rU[I0VIcJs'-<?Fue[ipJYe2fIF<9ME%ID0fAqft$%F`6Y5"(_79$(5W(nWOb2?Ne'6
%++m>;iS0'W7pFf5C*RrtogNl.p11EZ)`W3>gr^Z)qWF>dO1*kbaaX10]%M>0Q&\4jZqAO@.pd[4Xh=tVpRG.Co)"'4#8394/(O9E
%:ChY7=$Cns4/fV0`QPr<T7\V@BS_;!8(l\@%u3mC-Do1C![jI-ik\r0kPGiaR#jfKMJ'JT?P4^ETNjZ`\oU.N!<q9N5d\ba^2F)h
%^]Ki/b7grU#gDS"?WoXn497jaIKq(rrr1rU:Fr'NboJET2@HqHlRGZt%Mh&S^3oa(V7]Y\QfqYBc2"-3/:Y%=\WF#0d'?3G:Q_<Q
%5I]Kf(n5G>=2k11%gVmi%<2!(Vtu$-pN-,oRHC'+T*]RMs+i>as&Pq6l%deOh`?:*&6tkmTTW?9C9l;ADI0c;gMjSPS!j0C-Zedt
%3l"e=f&7+r`uhLYPqN<L<S5DZ[5WB>]NDtPf<CN!3Tp[e[X3\cF_W]0,eK`Nb$c=Y4FJfr=C0e;`-.bNLY1<ZC(6XnU`RBk2lI"(
%K*@j?>(7=G6/.PN!8JQ&2hsATf@16oq=Lm"K75KN`t!/mGS>GVMm*m>Eg)BR]ts0928Y@KrGm0:`8&h7YMq&m&a1B.*Cg!;f;5DN
%)CO&@X)1*\.>OP55s.s$lcIV3I+/8tTXt"tOamW3ju7=$8Eh/k<q6k5N1,^&:(72>l"-%T%^?uN6V])k6>@nc\SQ:Blpb$R;,S?4
%/muLCcb]knd9N@a*:H'+NVZ7HQ`LqHAdG<XiC@/L1_Qou2T.O/EC,ORZ@jcU/K'BJ,XShHJT;CFcY1TIbK=Pm;*W&RC.nuFaVkcu
%!CKLb,"%&h3#Vsqk'qn;g^'<V1K6H^'FVu*%-+?afUaEHR9#?m!N@0j:`.3gmLp':_ico>S+I^cq:I1FCnbek%LP5U.1HOS7].*^
%E"nL/[ZigI,5EYHF326A#E>).;Na!!q>dp"+J)YK@o\B,8,/g%qkT,K%(*gu94>NYSq2%[VNY<*DO?W'jpo\^?\/[`ZINU8E^t%T
%2PCk/\[AYa!ZYW$=tp8^pNg8CI*t0([(3@,hg&IQqu1kKC00gn/e8.-1#JflY_s<o0Lkn@i$:FF`KJGrq!)GIH3c.gd\gO$+*9lf
%''gW`auTFkrX4TfP#H[#!KHK]cpVSZq918$I.lBPGEY8]EX0k,2n?ioG,+\SB6>s)D&p2:D`S9.+::/3M?69#_tL"'n%$+uIQqoU
%)[Y:be;V[^Eiq-P8?>nL*)K%Br8OCEUAa<AYVpOao?Z1%Qg\71<+C9]E4ONPo@h>Uh6HP/=WD(l81-JMdQu2+o\e1f3nTl4Da&M$
%MeB4TLT@i]:V`g'mfaRJkkskH^>OtjW'pQL.X2=<<DH<O"lAG9b/J;f:("CIf'<*7A)SCinOF",o(4GiV`:XO35Cg#O]+I<@K#e*
%CO[]AJo9"k6N8;@,2/h#Kn;;*H5,KrSefXRQCc2>?L(D%Jj6g?Y]0.-6XdCroZ<Pr(Z5UP_?a.ui9:jW+BslcpB9XPT+_O(=8a0e
%4a&+2.gCum7#!tRc!V7Xi2Pf48/1cifAB'F8hsA&Ojpr6?5?p@e]6dT-Vp;med$2\^K`7.e7j<Rf^3VOopqr>@8U%Oldsb-ZT!q:
%CP+LCQD>p,FH+kuOW*T0`e-paJ`8[<@\We^o:pZo;R?+_0/sE1=C>Y7rotk8<-DU/?ghpMCd'[^WOtXf_a<eaX2DF.i_hZ/,3!nJ
%JVFS]ffS$AG$^cKU=d1E?,Ag4hCDhNhcY=(FR/!5i31I0TOIP*rc7`f`$,"jOmoM^P3>R<P!?KE?N^cXVD,BbC87r*WHj1Ws#<&<
%F.KI6(tIO@Q!FV-grd?[r9UQ_4m:iqCp(PNE#0_TM`]%+U%QVMDH4FPD4\-1k*nG-7#*.J4mjKRS]NOV?$(B\C$.A;=6KhsDLLKB
%;`\Wte'7PE&$rM\+#iM0f?\d?hf;5*g^e'(2G.b-XaId\_hanfKY"`Zq;ToIrn/^5beeCo(rr,_J3BGKl]G0e,KAN]4Xcm?hI.\L
%UhkcXEbmEXalf;=9DeDTEmag++$]_nq9`T6=!T.If;\<SZ$(>#P+:Di\Hl%.U0#P[<*)!0?@BEoD:Xhl\(iO5j<h+h9'a)r/$?Tn
%h[E?X&F]@"^$ra`7BC[^!4Rh]PWF6e`'iY3o8UG]B#5@0A`WT3qFA?o6)XAMO`_G_5=XF`ggo6UpYEi2pY*7J[IplhVrsObn&l*D
%etbm!8I+FC9_cWu#O=B-*])rYS@2P"R,&+rnDeiBC[LMNK43Tj+h9lm0>9R&]c.DH]WLWBJan)1^N?2-58VY+MJ&bsJ%(b#2fkT`
%Q2UPWT,4>eX60kWTO",#U9j^]D=2(M'8=i-42_AY^Tk<%??(;%rI`YHCUGhh)%cf'UU\JlNRO(k@%*WVi3OE<.A*\KXS2D2T71\Y
%REt=Ed_7rHGgU_+Z<kg?D4P=mo=)mM#*cQWmXJRm0D`slh\YX$B:DC#K_?0Or+[NbDeNcORobpuXf#r]+#__T%NCq..SAfUrRuaC
%Fcj(Hp%3T<&LfX\=,NI<nR8ud=dQ[oU<E+Mqjsq[jmTV%[Ct17`Bd,L%.Fl][QLP%rrg2;gs$iZD1:q`&D>=A:8.Al\$NVG??!#Z
%f))SdX2<V(U$&B,@\[!"<8=Vrm,s@P]K8CW0DFmb-.-%c(LK;ZELn8=]?32Fe(mg*^htg-op>DoB>sIhT+/'VaqhcgW]_86mEG0a
%nNLe@h-W---Jp5BY't15(L,t9m%Xg[&'H?p*ag6&PC.a_qXUamTg\/gijZLqe,5u[[GAn"Vqf\IK0'BgH+"a%];'C_MDo^Snd&n"
%[X(&f;4cYq(NQ.aIGEV,?S3rQR:4ZFNn:hcQ&]n%3B25AYPAAr1Tq6<6EWA66IXk%/@Dk5>WrMN[O4+h;9pjR2kIJ7jm,Y._2pRf
%r8kiaMnJT=m[NB8NfAh3k,N$WR'-#[&e-F)O7W%fm8jjgPl/#k>+7_0`tt,H>lZV1mm6a<d>8cDA+lHpB\&J5m!!M(5Hnl2a\Q6W
%WYVWEB/q]T78Wi-QfjJhQ7CSfH==f]2I)-%](b_Fru:2Zk=*(/qP^j\m!NYgP]QN[?-;I+nI;TrY.Z<d*Z&1tgfTgO*.NCH;D,5\
%`U[4#i,1g.GDfi7N`N80jkS=t[Ep[C29N$S$tuF4rXp@;o)U>lD"6W\h*R_ND(PGT5En+7mKjH=H!7rRBUM/VqZ^gq*$e)T$GuS^
%N]\8<I3'smaT,9[M(c\sgucHbKt1Mrghu2CMrRn5b/O>8_t$.;!'Tr!45\QZ+,rf>Q"qW_3c_oIBeh%GmhKm4n+l+c8p4o>2d#.W
%(?W8jTh%`sPdGe(3FafDVR4u9rJV);-!#$I]X5uT8"p(kn]HV!h&PkDq9mq.[5"=&*knR^@/VkD?gKqMcmiSiUt#*plkRC/i;R[5
%i=deV+ME$I4kr*<^ggg=ZOM;'fo)-amZ]p<$Z+ZI(I]pi>+<.Cm,#]NN-V%!bC997d]s%ZOg+nK`b(d-:tIk.nl@=m=te_XK>L$f
%iYaDQ0Adc_l4;V=<qWQ,pi=Q7PF;4=p$k3CU/'#$C$SI4Ph`isSo<Dl^Vq1kc0$Z)MNPTGDVjUsY#p1e\">bK^#=SbLtOCu2ej?e
%@eg34KpBim<W9SAi/I@:p=;,3$G4iZHc'P=3#]6cY?"8nrpuDhEhV8V7?8M&qcn0VDVr\t*^:KNZU9N/frOj4mTOF26=3ZRoO0Z\
%dmX@[Foo$urocFgjP-kIRe0h]iVW1u?H^M2]fZEB&<Oq!G:M$CZpC6p9D/4lDu6$CmHSJ7rCc\"iaNd,Gdld<=K_'MaC?]B+)Kg@
%\fU.gmL4/SQ&",.=%2O]cFn[K;F(atW&.U]3PXd#[I$ao)oEp'gm6+1g8cm)^%0c.]RcTMLKapG`jt>jQ]J.42^Io+)%50[-SQA*
%(Q2o:>5,,dbO1Sb8Nj[(l_aAeq&Cg2GpLtT4?g[eY/gLJd?g:_3!k>/1EJaP*VSnI"s,dOX4,%Y&`Dtl]C.[?9CM<b?bZ=5^$'<\
%\XO_q<s*:4=UR(.nZ'!?]([=a?0OV&FW^[2rk*X,rOc%bI-;Rsf,,_K/I39g_-1c[>hIE^o%)A^qrkP3HB`bX4?"A3,#&heYWeBu
%<*`C;.C,1o,.+XZ\G3H$]q!j7Cp!)JH@@W7BNa5\F&8qPgrn]Pg1j&mkU!G)nSGgj/.eU6WRN*4ra?\hQ(,*]Z?J$CZ6bdg;euE.
%3;WK![9W([BXRLj\02AaMWJGf(G+k!;Z:]b@n$2EM=r@LGn0]=Y]j'+[\kD)I=4%m/sTL2e[=C^9Qd@RO7"GR/+gNs*V_^'Xf('C
%/gK5GS./pgs);JG[/;q6#HIAb['E@"!eYl*K:7j-'MmV5#9\1cT5T-;Bmh:])2cfIe>k/GA7\_\nHin$Q1@)=rVH=Gn;3`f_LD;D
%+-6/'06WJY2QSk7eQ!162p::d[Kt:Rl\"<YM`YS*@,Vl):[@EBZQ'j>o"pDh)qB2:r8?U\ZZtV^IS>TqTo!]aq=?MAP`N8!g")MF
%bE#;>Jd$+W_o#BKGP@$/pKTq'o]6nTjcef8CP`P=L5nn*J/s][o!NFc;1=<oqUEd:2Hn[4cMua(`D%n1`Qtq&pL<b%<PdAsp[)iT
%s$X*i)B@eno#%S`noM/s@GCtte@YV2ietkOb]qb4mep&FFLd9+bqfN=gjO_&5=$r?,EX,K/2l+pXRpO'"`XU+BbdB3eJ6l_On3X#
%3?"Q,870TCDm"S=P8DL2,?F_irgDpZl^Oq@CS3W[X!!5+%@D+O74jcHD!eU(SQFK+%ijBJ@9G6ukLS&'LQB)iB-k<=dB'qRSb%&B
%)"2OYTIA+n[6(!%Q6&8jHnT7/=.3[jbr^VL%,uu\>mLYkS8McHFb/fWpGCTFS)!sDU`0T')_V_kDX6+IXmQqYma!&G35b3/I6?kF
%ddbWC\%mqRf5eJ>6agoRmE3\en[nMk[`u89ApAc6gem(M:YYPgO&"*tm7ck(J,e`:/`>+10:#Cc6c)o@KLXI$dA+/)C5jacABA"b
%(XK9iFl"Gn*+$='ok8%FLKt_K.=QWmR!/)kF/1$aVU>Wja<]@I`j'c1iH;elg\*DY$SS:#k%6Zjbr@p@]On#cDbY2?)'mWCeI+p%
%gXS)t#JU[k^kOd8B'K#H/p5R(ob%`6np?d**NJt\N*!.?2`(rrkdao5Ank%C0,*B,jU?5N2UDR8A@ar_<:M_$g.C[DlE75_$h(;&
%P1#maGSa`m?Zt\n*D&[\)]CR\HWL(G_L!tOs"#'bXcr!,0Cb$dfb'/\:_6g5ZtlcuLJ\,Q*-gYuj.h7fC"naZQebF2STjq=k5@tN
%HJ^m[[M-^;`XLlU4?%9qcUlEc?$Uuf:j0p>I95oYh/DJOPB90Q)I;h&[?2(NDkY)Wl^D+%?SuSiI35uaWmdR`C=NoS(_;rY],07g
%]P4\fDOhku)CfE8f5LMNMmhO4MSP&=2-.W__]77CQ.H8$W&*S16uH2gBQOC08mXW+Fno]W05JfhMKiLbO+9!-2!eE%@2(kdB/Y7!
%2^!Z:"1:[N,`"Wb%0X(FNOuhHa_D!o=\YEG*cX0Jh\NosOs`:\ibY[_r[L<+%V(m?MEY7c#&`$S]')"HRr3*$o"(Mu8Fk)(luq8#
%Fr1VmdIeo:0)DTQ%24]q["]VA*5Qk%!]As;Abm?\YJb1=(9\C<rsq7S)sU)--_Us4#)iK0DdTC3"NFeHHBfa(ogdV7Ffm)%,ID-W
%8b`Pp5)_aKiD]0o%o:_^%o):>=.lsBQ*u2-G'D_K?>+27<1GpQ_QKIZEl/V**NMAR'.:bIN,*./m4+4,G#jN.;`9XFYII'pC:R%_
%CI%1)g8<g3)KV/0$7,r7b>Vtl]4-fM*GM[V2QfFJo%NcIKuXaTLR\SPq0K[dMefKh#EW3hm_G+Ec=-/U]CMHI"%5pWANJ<@$p3Ml
%O,NjQUk<V+^66tsKE:7DI!k/Wn9,seW^1j>^:UsS>bEr.-Ld8cSSkkKHY#`e)L&f=RDJWNpYGNh8()mJ1PYXPFuHh#@>6o"M.[bN
%Aoa(O"c&(CHG9sO<W*tF:7[$!fPM/6*cC3>F7jiurEVC<_<L"JIeB<*^:0Oai-Wj+M/YQMDKSjm[r4"ohKeo$qA&Zh\)=0@+*UIu
%hcaP`R@P[e!6-k^*ERL;hHFO]j=d'p/7g)][1atd-G2'o%D=Zf7Zk>Gq5T$bCE:&+2d$//IWG=OQHA*HpHNTRlJ92IW/#FE,%M45
%A5-rWQBT_%3]D`.nUkN_B#=k5RAOQ2#?*Eq)o'6s\d9I[b^1.qOD'3bJ)O`fi6sW8rQKfKh9C?DXC\E@iQHl.[k'%F$e*5!E/e()
%c/qKmOb@cAfZrg`<6sQn#RJSYQ6VcK)AW^R)?VC<Qt+5&GWEERALsF\9jo9&3E]eTR0$>FZBb[U&Laq'f6(hiB/Q5WD.[=$S,1.j
%[iE["BL1t$+K1ib`[ue2=khA`%"L1jAdW'0\s"iP9Yo9p89Z$Y4#\aYJn#@VB:3^P2C?a2K%koSSJa!8!^Zno\tLL_d]s@satXlt
%NZd0/&gN1g%?\%,9i"O40XI2p&M3H<SJsg&Alpe;8Y@5[&P"R+3+FL7#QV^035Mh7Se[9^pCT=o<K&'4#o^%R_I131_N%%8i0ojd
%%gNAJ3G'TrC]ITLTGJ4se61@1"sGaV%,K!>VC%EH+\q3'DJ2@&!t5:]'YmX%3WR5ZJ5@tPkrLR&nQUs^3m>FI,oIpsLdNDa$!NE!
%(N<I.<Q'OKJ0JTj,I`K`,JL$X'!Fe<&Aq"3=;:%rS:OMiE>6G^:D"d'UP`N7Ti)@PStU$%NFNl0>IV+WR9Q=X)h]b8"(*ni"l+_q
%=K37Vj<=U[J1[9bKkM/%)3RY=`*8uq:I&^#DAB*:G_`giM1Tp%[P^.o>RV<h)Zp;^MmX<o@W8aj_Sr9/W.B"Ae@qC0-I<M4!8Ij]
%V#bFd$.oKZRWZ,M0N>YBl<RB-Q>Qb_FK\DUdR4PC"gi,;&N1p%'Q>E#'MumS*nj38*tF8K3#cSj`WAK!e?,jTJQ_EPc1ANU[T;nP
%i/o+ki;[uOeq0rs(Uoku+I7hu&Su,DbeHQRKOo^86o9qfbJV!;q`Y7eYL%I!L0*P'/;"bSG#Jq8!3bsG0BA5IhjVX%4%QMB<r,"C
%A,CUDf(r\"rj$[]Er!$W^FCYN*43I@LB(6Wl7cG$kj)O@rjM.;2ScF>"9W/3gK1]1LMP.[*0kU?lYkc/^o&fj_D\M.4X=?hYV*]1
%=">7s\Cekdpth#"Ss)Ru^2_(@4a3CG]%9\`Kq0VJi/EiY@iY+kW\apkM)4C#$Lhk.n_(c;FG's)diEHk_'Q?'.6]S7\k]+2fRO?8
%T]QnKW(W[TJVE@tTQO.FL8L(F2g"PZTF$,Ud,^!//.7a^9HlfYZs+p6-Zq9pI4-Q@oIYC4]&'?',@F3O`p+(icB,b/5>!"DI<0OX
%j4#ZeZ_dn4pKZP"S@Zs#*Sb)o0QkRg0s&taTc6<J=pt<Cp]8mFL0og/d;na=.0RV__*k+nR[-;p-Oeg-nV&[4gBL*g+hWJq;lVu$
%'W`XtJqlO9*'C$6WGON^Z8GRRC#DZD.GLLW[KE*XN>T]LR$rXL/33!'YY9+k)ATS%>Z$,29bhc<(p_5fMCaE?1ap_d-FXsT-jY0B
%5q]c`K&mOp(i+WM_,rQ&iZ`L!29Rht;DDBc9I0R\7j9fY1C_uf&AsUG(Z:*2%Rib/!GjIK`5+N`?jA'>cpShjThuKPDH62gFU3&Y
%\QSa3QkdY.2fKJIItq136-`1pT/!YrZ9!%r=kfp[.c_3-2J@Skq)JXgS)or8\P**tRM&.'(t9'/)\d-/l@9'DrJMfFX/9=E+eT9$
%E&9;M'LF7n"joMFQ/YUF_[&%3p&X$WOYn]Ea[Dn\@"nC.,;?L(KBa_9*Wt_ga@c=EF;';*iF%QN(l`nj%TF+#3f)-:%$-+X^?C=>
%TIkhaKM5d>1"-ib(-8=(>A/C(*WMnMaY9R]AqgKOfLa9im@h>3aUDI&hFu8LK/@)HPI39;pOe7.XjVSN4BiW3SA;r24)"4F80C<&
%M7Cic%L!>E^i/]aE5W'G5^[Lk^b.o<"cfof"H>2?=A&n''Ec2H2,((\n<7J-1iOFl;&M<Io95<eKLn@Z@01FC-M[so1mo3d?cc(^
%Mg(D9W?HsX-,IFmGEUllVMUlY6AAo*?n=t&jO0&51_&\\>11s,9[-%f:hLX.&cFBh-bhBX%4<=q)XsKGS@DZ1"o_6t%+;MK%WZ.&
%"KXuV?[trl3SA@n_n^28i(A'YUCBFYHs'8Y>t>fg%Dlp"&ml(5YrHtU%SfbQCh*Z.dE(,!S%F$rjmI-8O^-L.L!.6IhZN,e3o_to
%e*$0S0Zl:%hJ)]Y88469ZU!-(f>0!L@YaX`(hg-=)$W,5NB2K!U(I]J#);,86),q1AtN$F/sFt3*4upipZX`h`c,UcM-3Z*Q8::s
%2HPDf:B:e'%^4f?;?9,N-q<na[0k7^k>n('OS<Z@-QtrhE]XL2B@u,t(ur+]0:Y!=o69!6)T&lA?jIB!5osj!Y]1'X(iU6MK"/]@
%!Of<gZp]OA<l^Q.,l1QG6Jk<K(l)Yl/@V0<Bo]el1p4mqM*k_SMM$Pd`u>HL3!;mZ38!.E%b<LCm[%=;ro%9>mS_N1eOaRSqos*g
%D?<DL/J()87,3C;RosXM*G=or!cS2CM=mQp(LS.N-9dju<_/66!%1+W#TO#(;+GV.0Vh*m)3'+n$!%_QDX-5R7@:G+S04@KJ30,!
%>rf\@N[\O1[ijbj\2T8[_L\j$`dkZ8bgJ5_``6H"7Z&l%rKN2@DV:C-#;ChZRKXiYBHq,(VLgPt8MH&AZ5X)1)<8"`GTdh1^`$fs
%FFi5H?oj["Rm=QYEs3cX_:emt\WBb,I7jVqMCW+?P=:%m(7-]o\(O=i6bH<>"#38TB*.gG_Uo"tQq]q\HBt&M\II2S[D?ROh0Ds=
%jB0LW)O.IgDZoM*,>SYTggMOk(mg9DbV]Dl!5ZP;!!^A5Y_?KKgkNYu\qHL@[=SG*$\AC(!K5%a*69H3Wp/HK,MiGj`_419/PLbY
%/cuYEGt\l;D;-f,PgFWOA;:Xl^Fg4ZS$mu)XuZem#IS\R/keP_BM"M#gefbE?>\4:$Yo!f_h.0BWJ=l'L'^<W8eOU]#))59#h)p9
%F%82U:J<`gk-c9GeSq!4_Ls&'!Bga11rJUq[%%+)bTMgQRS^kS`&kao&#p"1Z\%IsB`qfapB2*\E+KGd^^7NpKOclm#[dkH/lDrI
%K5#$+W!3?'S`*=2(b84EiAdXPC_/@6Tb*)4kIREr%[RA$1]j>'QiXFA0d71I1iSY3@O2t;46d#p#snp:gq\=p,_?pX'S`e`dWd#G
%-:]a_.Kt?R:6IqSfH=]kJjG")ct!]"#qLOG7jjDWKHRKY/>s$J%9Hq&ZB.Ka1B89nLcIb<&<*hOf9H?rl7)3J_DIJ"l4>VDM:N,$
%YG2C-1N5X@WhV:k9I9]I9e=.0]aGsMQpqb0Conj\*5lN60Qc*U(kNd`fo%QHLd:bQL+in1>>"MG]921r8-GDC1R7CVED%t%";4MI
%CeS7\N4/UUbnj1rAr18&6A5LYP\<uf)srh8@1^Ze0[!<s(J1UjJUZ1L,VZP+TWZ2I/R#J,OQ1:?C(n'])PL_-h1.2PVlYmUM<$Q4
%/aY$TE9*Tf"Ilnq!PrrFEe1e>8e8dT6mI4I"3=q"A4kY[=D1<d4'@b76O:"M;cbX\g"Z_D_6j7G)H50U_]]JANp1[s<.J+V.Ua>T
%PRms"9ku-on=Sc_O=/9Y8d^,]&jTiV9a(WU'Elm;g6,6*'7#1$#h5XVU8cWf$lh8;9_ndJ>0r%h,lm8($Si!?;&]jSl;ZR@1ePL&
%'boF\:m'93mR<IME*-[Kcj<!8S(lSk^f7h??k2`j.KUlo.>Np0*9hP/5^o@Jbn>5.>;i.AQq7q3`0:iV"8L5>C)LZcamJ\%;@&3W
%_HkudK1/M]qP6Kp#!jj)#\O\1bqYG?(RQAS1:X(Z+pM9)0+A=hjt1ntk_od'YZ8,gm^/W,EaXHK5;Th@J6Oj/eCGc?Nc`]$\Xtha
%l`)@o?m+,8`gd=SA9H6B"uemgTOC^5#igJF[un;LD\l<X,)g#l=h4-sWE9///6Ps?0:+B^eg6:>6'HQ=6!!0"b@E]10.7ZFRa)V'
%UFC_5K?M3/8HBl//e`gs1E?W7(6_0Eo_TmB#cqJAb7(D'ohj8eX#(4g#4<+''GOtPP\K(OJ^/g-9TC-<*Og2'k(MOhJRG.`.Bk2H
%>AEG2n\LR$OW-9O%,dp]5e`Aa!Qh!K\E#@MJj=M^P(,_o<+iX-P_i-S+r"%VRQ_dFi##dOgMT)(aE%r2EDQW>Aa]b0k`q#dL@b`_
%#"i7>,V'PPP%PLhWa_ik&&@*/WfHCo,da7Lrt^q'd9.Mm%0S)c_RRD2^bl2N%;!pd0S.%E_Ot-F.l_3M.p*g(AZ>Z#lT.iV]J2ug
%H*.06>e8Mm6`k"eZ8QB,c'$HbW%P=M#QjN*-D[?N1E6'Lamn;H)%%A67fQ0c!LX7b:f.KMA`Vm%MaQ$GlVp7V6'=8pJ3u(#9gV-W
%(dJV%N?_.T0FcMiYr9*QNhiMNb^;_9bn3j`6/uXim`;,gFSZOQ%NmM?F-)ni3`1#"1NW'3KdgM'n@l^4F@``gL[S>cnpkY_Oqc1b
%f[;%)C_.O)PmbBLW>H4Z+ZCV*K"Ijpb/H`-/'i/Wf[;(6*&(49KEN7X]^#n50fj97L-Cf4.[WI+)=/6f9R;=F)2<,las2GQPn(WN
%>gSKS(W?BoF[-b[FPPiY?oF4:"cNbhYe&1T/.)NcKqh&&Tg+,_NEKN&9LKFlf8s*(!!]Ql+df*P_S]EQ+V7,@E<o$kTq_6kEE+%8
%6]BhAe4"ZpR@"a;^,Nn/Lk>pte/&s,8-aiW#Qm726Tli1ktic=876\87;?$`2AC[OF]9&9&*soG3"S+a(\+@!Khd.)&d6Iq]OWQd
%Akb49l8%QlP7?XV]5a',"*]lI5p3&HTEMV:-J5RMq-MLCK*EKBOGi9K7c_u.G48$:%i-q:^SN7o-8e$pJnUk_QZ`iLT)m@W79$k(
%P)_ZAKhs!Z-([[0`$%e\!lB&T1W+9NNYRd70kNc;&6N$H3%4&[7?M$ZPC(4MQkNH.RA6DV$-:10k<XKQS,*D&afkb("rPdn8#VLe
%!/-f$X=R%Vno5$<P;$4!b!E6bCP*A-SWI>8)FTr17#e/.*/@p^i'EQ]c@r?[=LEeHjMV_U2M12umYO7I1R)fe82j"<V[\b$C^MSA
%0F4,WJm%;G1Pd]+9af)M>jA3OkSLQ:N,(BY1UM+oT_!73$YXFN.as%8[]'F<8f*##_JgV7-s0W)@$[LR"&oi@<:9gq_`<9P.uOaH
%RitI*(Q&G0,Z>lq%tXs;(b0:Un%iuUbEPrG6\U8J3AqCV9Mlg+6Y^A+"GWm#9SH%EQt]">/Np%M"R-F1"iI%.[NgE/=WK2OiDtbY
%a0t*R&^%M#Q8W\G_/q"jQt8pXTgp4@e.u*+1Ec/=&*@8i&B,Pr6V#0TbiT`tX!#5:Mni"%<V\[ZbX2P(Y`K:pVKrL0f)rC4?[sGb
%91(nIE46Fr.!_mRdh5OnElre6@VOka)*/s82j?e*oE@VN_N[M0]jV1BW,pbrk#BJDbreTZ#'U9j>*tCjcm;(9N*op0G6B__D1j>_
%?rO*AqK)jPdP;uu5T(o9*k#g(VI21*8hfAXi/'`\fdstJO@:>DPNE'S<q+Ta$o8;!-D[+]_92H%n/Q%:<""W<6t5f=79C%Z7n$ld
%Lp/<&#Zqf5Qd,[@X?.h!R'_grU)D%6A*^EQGh@b6In/^RK<>T(PaEc+Nm%-471=9F2!N1EPVXUo"&)>=`PCO^q:DE,/0;=W"rRYZ
%;H*>ohUS#_.TVbY!.o#6bo^PD$lR^uR%mM),@lKs_;+&nd3+oE3Qnek*"gC`#dsl$e/U60";6MGKF&F2^ibmL)5`Q+"h)MQ1/*Ij
%$KPS]RP>6"V$i@U(,BqT_9rW;0QK7k6k!ZVQkb/$L,-WL+laI[70o;e_ekC]NO;JC'b*M8n'[FL(5++_Tjb7M#[jT5#\9lOO9N.G
%E>HDFJlK-87qNV>%,Nfg?N>I2fqa>'BFrD;=9(,d`KM3#\KMeg0*DqDk!bZAA<UE&6^YcfHIOX0TVr5.#fcB?1GgOW!4/qQKP=,D
%UU9P>Z/SCiFX7R6\>Omc((6$]BIFIi#<>SR/#/u8mC*/5f1;<DkZf#lcI:-?D8W^^R':.nO2/=?J8O(.6SNB^C'PSF%`m!`SUpP8
%W7j?JEDACl5S.7A"iH!XJi'1>&P\Q<K$'NY;)j/ieIcDmCbrj8*l+#hNA+R:7hZPjb=q;qF>/Ut@1j:hf1O!jP%@(I.8Z49/uNRE
%>XK>T]Hg/]@(O=Pl@p%("aL^`;b@J:*M"a5=ZhL@a<q:ob?u3\-:Xc1,9FWGc=oNEbX244'A'&.E\OO6bhNU@Sh;Qc0hn!6`:sLm
%*+1p+bNLSkY9V7$@:fKI<&toBYWCfj-4#,q=ct:fk$SBrFUk/PU)uJV<@A\4Fn"P\JD#O9apE=60_HQPU4m8J[Pl#+Mkc.:("?^<
%##dN--o-*kK\W[ILm\k_>_#4$PU'..R2eo8T\2]":^Jh;Ajbfo!-;?I786tm\]M7P-n&5$>rX=o6^]nLW#-kkUVIXWi(+djHiSJU
%1Rf)K-J&;2B'P[6FXq2TR2gs3&Wg[':Cc!.E0-iJ+Uis#8,4LU;!ss1V]f"V""ju<0nT1N/kcEn*RAD1/Tc1n]`19k:=iSZ``T`V
%<Q^aO"VM_$R)q]#:ggk)0eDL]mu".N:fPIMf>&Q;0R\a29BD:m0SZS;<`J2-;6(mTBc0!7s2"qDZ8EV%ZKt&R7SqVibG2^qeAP=N
%iE[)4qP6m6/;DZu1_^?lVd^T%T1nrHYlYCLGClfg%PC=5">a%:$sfO!GB!Egl$,!YRLEFVe(#WP7eE@N0NH7q.9b1GV?*VP<X?Xu
%4b.U,$pYYr?3EN8gZAhgKZkJ[1J0c]irK0:FFa:a<eGL>ac&TrZNLY(L*kAM-q%=C)))bO\W+DOAMhAFakDuKf=>B>OF[FFK`ZBi
%QRosDCnVuN$`60)DVrK'4Jka0OpICq2<5C&KGs'P;pn/3fo.gJAK4t"<G97GTD1Tf7h*HNnjlpm.dr?7J:]uCK(VE(Zl@4iGmDVd
%LOi(8(=6Kcn<oAM,>Bl]2__@-%"^Z,QTIhce;g2V.d08SVCF+58=7Pni)6RK\"N$,$oBaP#u]V#'M+Gj$i*$lRh#9r9$ph0HC+2_
%kU(dX!<1O&+W>-ed\\"n,u?T@8Lq<p*XZ:i8Kr+2CeUR#nk#r2P2?c#R^.\sFHS"gFLXT3)5YL^Dn$j*aQt';(<#QKhu664)k?RD
%(d`X3$@rhI$bIApOEIOn0R\Zqb:s#N(E2h*,3n`N>V=EH)9n;9#LO$;6'b)W3Z,tA\5WQF^lX\XK=NOYNJ``^T?=/W;DAUafKp\,
%;Ut$QVQN!hSd\EsDA;>M>ZS.HWU=GjS[NqhVp!;MV5*_!%1sG5F.)F4ja8Dq/hiQ&"dq7X'5Rf89:@13+1;;Df8DmP;qhg"k%]M7
%)oTO,s*uO7pC(</B9(dD+G2Y/Y!$6;Y_'&7\__#`\1bdp%3g=F\KZd>$.ltJm$B0Jef<K,!O4?e-4`Y@SMUEHFsd=1Kmb*h*J-Q[
%6njUUVurJ\PgGg@,6Z0tX`0=.`9BR%7rE>*QuO?JVP&kZNE[Q:9#[Z,1$&CXg*S06$H=TV>]S1Wej6CI!n4+e>fBR7K.@;!p(/?&
%b2lK)[KdA;E/Ln1Q\UD'/8YPWJWgD?>F=<UQ&&T<;9)MaPc(&!J75sej5q<':N>lnE<VTj7+jRP3-hSE\2I!j2*JUE#K0iEKU2bZ
%cP'`-NqFJA6<E&`JceRioK#OPTe=grIc)'1l_LM*E:?A-6LFH_jXo3ncE\T``Qkc?<A@Vr@,S>Z*C&=KG>t!I805Xa`FIE'#p<hp
%;>T=.E)=o`!9`SElT?:,0dN?bZ4+jq&IT(hCF.VB#'$\2>KO[SU)iH*puF%`:")pKiI+>*`f9_NW4PHNgikZ$JK6@sJ\FEf(O2k_
%\$4mN9t\ij-4LA)(hd;R(*'e80N+PTNaS:hF<Bq\U.`N\.`[LS&[$+ePQV5tLL)X:-uc^L!\PaqQSI11_1Bt0;R'r2KhT#:;P^(>
%H]>1*,P5ug%SV3@@'4I4*A/6?NrR-7)rVTqR6gLZ<c"CE5+elTHAr$Alc*h:%$(F>2Sc*h1+tU8S.7_;7VDP4iT8:BDsT:Di&_sG
%_NTIi0.`upV&(:/n25'o8VLZ'>^A*@Tl!XE]MZJ+$5l,@HLNXK[f7t?NSm8C9SB(F-l9@7]QcoCM,;hjV1Cj]Vtc)9kkbJJAqnR/
%TK#mu0*r.OdR"l/<sH5Fd:O4Ra)/[)4ra'AL>^8YP<4R,=cl8hkV/`]'!c?<iQG)3A9f%ESoQ\G=u6#JY%9:tgo(Tcj%&7N?/dUd
%!g]NC)7XhqVLtlC(0r!*C@4Wl!9#[8gsT*mOE(5::=EU(bTTZJkafmqG^.f"DH'Fk;C]s!jdc&BE\6(377gi]-V8G$R8l:W#4A`^
%/#f9MQ2COh6gbZcJOOS-PHr5:UFk7&C/WJ[mUSUB$HPp<;RIWSjTsQ^A`<"ffRg(\OeRRgE=XO2fpQ)K6&*DX(>'LY4OO8>;(^f8
%]M6S]dbVn0/gg6KA7G54d#JE7#*)G^X>AYiTU)!b3F1+pV%a]9e<T6joi(?[d=kKd!cAt;E\dfm]h^E&:YY*K\:ZR?kd#e'5T73B
%^G&ZH.iNuR,liXAoZ>?cV&Jl9CJ:mh#"o94$/(OlG'W+:i7cT8:m?62QaR+-E+"_#fC3K[M)SgD@6"nO?\_qemS/-M[uFKF+Y5>F
%d%la*$^b[X\5=*h8'k+M)].TACuH!HkUIU^93I-*0W]G2.::+l95UZGmC_Ya%.!7sE-C!aD5iD3/XQ0K)[8e$FLK!s(k)K1J8Wt8
%VjVR'_%_PLf..!d*j;"5a2geBc4LoTi"efgi=31h%!QW"N_e7N%^Sj>r_J)tNP"M.-#JX8A>.S?)c.Q-9*/UG6S3H>`]TYZf$PsL
%C'=uh!26XU/d7MY_aH1bFYmVuL#;!7i5PeW!X!D*csbu\AJdK8js7a@8Rs#5/ttF1),V8r2-Q*eUFfrbOU,G`>E'L:'4LGOpUA6E
%#^?k5-?I7(YiSnfgkWf_C,kXIEQhfX$6U?W&'#s%[1Kc[["s_s^Vb[u]TaG;aL_L)R=M#b+JqgdShsG4C'kh1ru+*$\jEP"0:R1t
%Ukd>&>f`Wa+*c6ch%ZdIrW+Bq0<rL6M[qeEl/\B=%W6=hgCYR[A;1M0EA7Yk$cN%S+d;h4j98uN*\B`reW4*o)r-s_a]iApU(@^%
%VS"l(S&Bs2&PO)Ldo&8%+ts+7J<p[apgA-M`e"S/i'a7h@1&F?\")r*#u2ucEmqM%jM;ah.3Fh*`IJ2;bPsrXHl,<kl"pp7V?5f3
%,V;5A6I-Q`M21%s.N"0XOesKE+_Lu\?CBilj>(CsE)7D6&?/eOf,r6s#S!p[1K#qUa64/F\]I7-9OMXV[/bCr)%J"s#[=Gn@h&Z@
%HFd@R^aol\MP0UO/4r+5o-_pH"=(`O)LpY90T6iZDF6o%b`iRW:#qHi\1\QO5tVts[N1$5-F+T16-,d*OUr>\a`EIT`4.pg)9*cH
%S(C@HXJhMHg4<f?/#enj!kjOPYUPD@Y!g[o."O-]LR[BCjj43d?hhYG$MWY5W(X1J!MqpQp&Ec.],/YRA%TJ`oKUi`5W4SCmuPNT
%7YV;1mfiU2erpsnNFbDbF;[Ykd=:W_`JWG`TB]A*<S]NB)%5S8Ld&6@cEG=5L_X].*(R2>I8ULmd[:DjegWSLogp,\I*^og?9Hn,
%Si@_RN'^VY"CE7BlNW#"MTqcarZb.:p`1p1@HSaWSh5+I`^G<9JO/_u`_-Qc/cZ+C[L!h%C(IpE)<U$""+F08oP6H)K8o@nJ8/@s
%m^S:bTet&.GC!0=nU&1Q;2_M(>0S7t15Mm=p@_cPAp[HT<K4+BNf1>6g">I_]GgS%/phFV'+#pE%Q4[IAZ8-q1%0d!m)bkl3$Yo1
%VPhnR`?O`1)2%I+e?qbY]NoVLEVjlOk8oaphm:>J.N]D&>UQ'_T.\<\56t/irHpWs!0euIV/\=+0p!XX`GF*jFj`Hh^0(:d*%8S?
%nqR9WKB,TJ#Y[NX/U>kaTKMYB+7=XDLVrA(nXW<+42:*V!c.+;G&>4hA;V!WF"k4>YC`:gN>0grV_sAhEpE8?#t555HJ'8M:p%`R
%%TG<4amW'Ejk50_;OGF.q.uRY9AJ&BI41g`"^SRZQ,H/cTFeNUZ>B'8Z9t7$?".V@TNDMA#;<2s%@FAm0c#`O8EU'nmgj*C%VWL2
%T]t<`^:W.?n%X&*7edLh_R]!t2:p3t1ZH$2Fl;u$2SmDh?Zuq(9n7L6of7#In;%Yn*fCkk\taTt(iW4A)ur:)(kkfVk]l6])Tp&@
%%52c'#Dl+QE;q^YGCs+Ho=>n='ENue3`0HD4&hhSo^B1PLSPE3AeG4SM5-d"1O#As<bNM'Qd*R$57,L)(()H(;X^F=MP[tk]B#d#
%L]O.GBN1'$(lg2mps\T-1Wq+r;fWu\Z`Or]0IVaao%!ts8DcL[O-5imm4iskLOM"in5X&oEYX?gD7W"0loW^m<6mJ/7[QnC.^%$M
%HcN&UmnOt>]-1nbne75Gr]Eb?V-^L!M`a`+CmnS[PT/EKDQOm-X/DnnkXH*3\f(PsQfgD6JNS+N*BdW+bZWNW-$J%A1WG41CTaPX
%l-$9]ogJ:%+n`1,Hs.-NgO@8tjBoe<:KIMd%k$\NM8r8l*H@u!04./d!j>7GP0MuM)p<a1j7aY1rU<u_CQ9Pq4jOi<ARm@ln39W^
%lS03pkLisDdu]2kKFW?,#iRrlbA0?3MgG6-N%D.Lq=(3i3U!T'&@O6bAU."6Y;E%S%#5YI;SAg`YG,WSD<L7l,oB^T@VP_/?tT4T
%P"[@WHo!$17)B&@:DBP[=Rl9=%o`e<Xl,5Q*b5nb=m+/L[(L#c7W!FdZaGU9i5;Z3!L%(X?=Jr,nJ0*r>YUR6QX?jWEPbsWc;n=/
%!1HY93Lfq^0#H4VX+0r#PP*GDrK:)LI+jX"i:gU@`kL$m)fYK=IfKF<^Yf&Y+t!1s])>*Cq<r5$7r\@h(lFPNC5-(AA6:CFUa&";
%MP0IXN>WoYC"6'$Xf;r*L^9ri[5rK-3m@l;Fi?+C8MtHiO"I0VKr?ct&.trW,8(P'Of0L<CjRROe0u!&)@HHrX.f:"h7=g,G>TpR
%7dcTH2FPkW(W4tQLUC&I#*[kD7ah0*d;Ifr#621VG7'2Gr/$P4?o^HfXRp8<Guq:(WTR&LZsK*NrTUsYRBFE+ST[q<gH#.TJ(uP'
%*JIn5&)EbH-L'`2i.Jp]*VQEW)mjo05<^7!F^qD3a80WFM.*SK4bA*e*9R2X,!>qFoMl672*.VQLN<QdjWj^;Y0A8&9blO^gWk?j
%C.&k9]QPS@"@M09V`qS__<Tt-cnt'TqJ[??6nbK8I<Qb#%WZq-lud'uR'.0;5Jec+Fj;!\4!pi=#g4rRp$!5u37%;>6VhLXgb%-3
%[/84:iEgOpGFt2`0eDKVlm);n^*@lP<A5tl_HoqkU)%%]8NOPa'(.G0C;'F.d+KT!fP2-jkFr"6Aj3WW6Ff8m?qRak]=r^J/mA!T
%aIhcoi;m\N+<HS+g!4M#R?%kA4n<:5S[Ml86,Q&j[Uc/;f^S:RG^b$N-<ZOnko-9@g]=tmH,\S,eQJ<A@]Gg]n0BF8OTa3"8O1K7
%2?T,6>^8.27q;s!:R'%oMEI_67Ic<':5D#j9alP9pagV::@*P"//@L*=],[rTD9s7qeasT[k:\jQLZHa.!3Q$SD5sm4fd$5m3e8Y
%Y:[9(o=LaIpl=YVV.GQM8oHnbpBRbOIb[i%#EOqXL"a&tDt6YFEus;K^OmmbcJq6OV>F2>#ji#NLZL32&,=iEe&0D]LDVaE4MG7=
%01!t4oF9Jh]W%L!d/MgR25=X8]l:=pcfQF`VnOl+<Z+^3#UZXpS"4jFi"0Y1kCL`+2[84X_$h4)hGLGN%G\C;RncoBCd(Rhr=Ija
%p6=%\d_g?BlDrQLY*2uFmi&jj.=Z+!Bmj+(8AO2sRW^@\@b_@[kj[%&4U1&UQM261]C-<V/sQk9beds(?FJK:SQnh1-YnQh-2iN0
%'_KKKnC`=1<uX\)?pa$HXkeAq%N31M9=O;_c;$ennDgE9VqT29,>YbsX3]AqM5M^BmJ*Kn=#]slqsUQuEU-(u;`V@aaqXW5/<`+<
%=Dd\_kT^V@8&4k"1GHM4LMD>n2EtQLFn8Q63*ng\'rkr>bT>e^,ahu-AjH.VGt<GdT!'C;:kWWL#Csdj-5e8t+DOq_8d8uq@W2<O
%8p^nLg5Dk,XQ_T7W,`&*J<E9,"AF2PdFg:r.ZEE?PnfH2`bjZr7mcb@!H`b[MJL@:.'L>9S'QdHI[Ph.e"r:9RX"[qVk6BfVlh\4
%07DE!puT8;q!\7M\VJ%`&O:<LqO'g:,o5@f--^rWA'I5JHk.A9"2)l48$Lkfr8POH#<Uj5Th6j,+QQ3?JN&b=T(g5ed]`_>;30;>
%Gu"gBefQ^hA+@.K.6apGpRhD3MND<+[2ND;,5fk''C-t>M&YFhEXa,0S2pOEA]RSjq*8$r;5e"mG7,`+hVIWe_+7G*oHW\'%8Rc/
%%/Z=]*eKTGU=PgpSXl12lBlHh3$Er\+IU?Gs7QA8I^U'A3lTF3p7foh2rI%VZ3\k&QFG1pq&58n7>#N$\Tk;G7l\)"0o6MRpfGSL
%7%*Ug=KdLDm"(Xt+T@<@EpUJh&1=uDEP!PN[9=5%$smh-=eWg6A6mIhKRD$mhm$f17:I1ToV;RK%SV;:7a\W^c(*pIBU0*gVQ^ag
%4g7Ya5L&,4[%2`=>uSK4^0,/a)HP_+Rou^p:OlPhU0?r82Gqhf#'*J8%P<SJDI'D1Ve,>oa]8#ZE*V6"&,bZNRJKm\,Zm#qBJ\8t
%V/AD.p79PU'0K$?**&C:ol1T-$2or>"IP_/`i[u7II%B!G^&,m#cnQo6ps:Z&O\X%?)TO+/c#RP2npU=<Eq])-g"PBp`buH2SUZ.
%LtfQ^BGOTp-ZOH7;`A1YmPW/>68m<X[c.[@(6rD"a2Q_g\SiA14%7.N3\lP"B[2V/P^@UJ\atc,s!,h!*a^V]rg00]?G4#+S`QEG
%bM*(3af[O^Q*otsq?e^,g=Vp=lP@5^;^<%8Q2Rbm>&`q,Y@+snL7nbABQ,Fl"7!-,R)O3S4rA_#7C?0)K?IYU8PDu.RD[`<!/G8%
%008@YT[5+QmDtK)Q2i4d?4rVm;c+$Xh$2%$Od>OPh!Es7YN3o<qaWM8;R0fKYj9]`o"f&gPFXl25*etZ8PF&b-rI?K[upbK#su]g
%KqhHHOC4C,2M6I3$2&pCg4EG/7Ulg+m9l[8-1joG(_+__&RomO+#871dKP[q@08pL;(5ZW35CYd=Rd6,-Fq5$NbM#kn5'<7=1dBr
%(PR!IWlK+9L/%JC+\Yrm0U9;G9ES:!&20,W(6Od?[2Rj%65GSfXYp#\>>6o"dHkt6</cU_07S,<fdS[).Zi7j9DYtG(oNq1B':0^
%K6Iq:VA2h2:P0h@RAW(sFV:sme%Q@)88U6'mMH&^>6]JjCgeV".7<]P5fPe.q<Wo=Bcj>u/],4C%][3[nQi(hS2R^SBS.Vn@7,@D
%6_<gLNI>ft:$r1X6qr\CA.e/DR<\$.>#)=EA=/Gr,_Ob6QPHn0mn_GOK@Xmog82+2TJS5=QM&cTA]-rehPte8O2D6^.IW/29Sp4j
%c'G$&2m.S/aL6Xr+VT!UaZR<-@73&.4Cifo8^C]h^7]*+CWd0hTLboVn?WD=MKNdEj(pW_Zn!J3DpKUhc=0p1gMhUF'H4?[.9;r_
%2RYqZ<Ne`r8E%?coPV7h]7.&\Z:rb*WU/mOes#l`\54O,[@qB)S'/2ua`poZUsp69#ra\Nk+.A@ht4p`I_4B%e%QNfag^C^cog7j
%?WRh8ZqEPtou`Dk;N,&C+guj`4M&0>I]SC8QAnhu#K&#8UMZL>"U%ZDVS8*)F\-#b$C2<HN']WoY;SnWhTS@,+hpH1cu!2AR'_LT
%"S3&US`'W_C"eD68"Pj%`4eB^g?@_'gu]RHbASN^Wr[iE63]>L]C0-Nb(4KQmKY/o2]O+GZUWiPK;V_XV'jHJ)-<`41Ib-,D_!31
%\-nmL2o9>c13/\bTGIS!_6.6Lq$o0Pr9_0.IIfe]0:prq0g!o>*'LnJS7kagkrk[T@$:?#bE[jqgsHYH%sQ:p9_'T$F$g]Pdek0G
%,.F`.Z`HZ&M_WhfSO81uLcp"Z%?%G-n65@\+7%[=[OrajDoMscL8KhPL2RSgV`;%PCaInOk$'qH096ptMKS\ghI%!%0rJA:Oiq1Q
%CQI.mha!&of*lZh&$*mDAM_iFi*-5U:j&L>Jd,*NH4\Su4#VP)a1h.Z-#&f6m+9MqbUFRB\KXjb6-0Kn.^,6fT`PZaB@`c5G&?uO
%?0!0`^Du_FA0mE/+iG/`@_A/?4PQW2Y`>C@,^s:fn`8(IEJcTT!XLD_EG0:@8[!aTG>UcH1p"QdM_lUge;uuV[T8-^&rFU5pG#]M
%6dK4ZA@_=u4Pnb]\Zte5'g+Es#XL/O[/c13ps)D/E"1guZ.3uC)hkOk!-m-7lo)<oPYlE4cfY)gjp9p*r+co=:*\^VCI"mZB)?@X
%<SKrOhUqO[hVE\]qbM9s?O%3p$V0PM_s>uW'3Ds"9f>FIWkbHp9F@96L<GW^6VP+d,Z.^!:R31Ad.^3;)5l>.$DKV/V^HWgnTpHK
%pNg9n:80+ZUrZ!Eh-eE,*hnkin_\A'me[;(lom6eZ#!?/E31"=a)Fu;aKXOH"ZYe:X:`:S@n7S5+TU*JWE=:Y&cLX`^te*P2*%)c
%edfTD[2?1*DJ>pP.W_us;2,aqaCgC8+h%>7G%s[F5oNn>1IDkWbkc2H)Ra(J^27/>7g0+TiKrR[0a,2FR'[LI*7<F6!1,^26eonB
%dt4NY^]BG`9NBjX'Fo_lBfJ`!8Ms#h3>Eg.<)\r973BIi+Y:%4502rpAYO95EQqt*DUV[7ccTWr1(efl4GUg`m,g+0s)sq;CtP^Q
%8R>[&GMa;a1f]?datu)?&OtuE*//Z2W$#gcD1IW(X!1Ea6m=8D'`pjgOkj3=G`6&%S*DAO!`b1H`ll-p@C*8lD2MT69[gfQ`F-2h
%(*Dj6W^M/BG'1_\USEiJdqW`Re"MfO3PLK'DJ\X[MNU[AVo8mSpTk'L!nLLeP&A]T`s>I0k<<2=n"47H.'(6uJ,'t(q4hPJ+Ig;c
%h;W;;Kn/%g/19;.iF1f[YQ@^m[EdI&VP;hl^/YmQ_:_&Ve!e0d[2QecUm26/&p&$C4KDo>J])(u`a2LUWK'G"Fl(:j6Cul3A9RRi
%'j$UZADkQh\og`QQ8_5AD2[KKmkjdlF3n_"o\Vm(om6<#^ni(<U7AOn64jb8I@mH]1^"-GCe688&o9eY;_eD`kur.*9#lXFHIs!g
%!Y6c0&SA9+gG5Vl7EkNB+$J:0ilJ4#[Bl8E[K?*/>?g&eI\9TLBueK:M?FM8Sj)hb'QmWtiL;sHg2L2_lZ!&6Endb6@U1O<WY.t6
%Y-mkb*CCBg&G-ta3!uqZFR?8M:L_[R2ff/RYd"p,-WE';9hC",n:`5_FfjiEfc=%iNehoqS_H';^GQg31oe/,=`2^GFm&Gdra.Z5
%I=37Z*4W,/GV4&AmEH/5-&F$j>MiZ@gJ"%DCc!.2hlFan9RsV74&=Fo)g/8(Nc*Y%Z)f`#cc5]kXCH-Vg]0+n^&G_b]&==om:/(g
%`J&hN<\h+ijX)OG>[+RkqUuYb)]J`;&Q1AW4-4>=0L:^.3kHj;1)Nr/0>jbMD9?q5-VB<3#,Z_Cm0EOU$mHOa2R6Q.rQ\mfk/BVG
%cX<Ymdr@8JL5\8"&U?Q'A9ICSr\jWM7b&uR@+XmdHi2Z3o>Rp7JED56-'e6!)e:RO8r4@RF9P'g*_[MJoL%%7TSck.'Vm'X85:]R
%hG%E2;T$b#B$mU8'l>Y?BM,jES'CS4ZA$cYR4ET>D3FG]bk&F,m/Y.V3'!E)Jk4LQ7?!``pTWqG=HttFs#G:@Is]%(9IW%rCm(Se
%!FU#Qm;EtCqjJ@7j*KIn&I%!NO6W05aqcm1d!AhSpJ=>^adS\j>)jU@l8A"FDj8HWA'gAb*2.nM*gKuBJHVDH#,pmLdZIrDU>TmE
%J8n8g+_\#EQ!&FT9]GiSOig\RT>WRMPD1SU;=(46@s3,2V;,e[Nt^c:aI'5381`Fl=`]FQM.Q6^CPLe.r)GoA`S+/&PQ50Up=2[0
%<a6rLMpBj/q9!>oP%)MhONDEMqWMHIPLs@?C$plJOPq:IR=R@n1lC*]pu:-!jlN=Yf(`dG'n.*_MZ^se#/E2qVT-j0NZ`SP%'q/>
%OCb13mFgPO8Rmo"*Hl^kJ$I&YD=:=nJ]BqJ-nFfKfue.0/$2IfU1q`>c&ij'L#PTt]*'E`=.p`$)ID1\c6PJhiqOtP_*b_frPZ%a
%hsH8O_e]RYp2GI)jC=(c?!k<_Sf?>>H2[!,3W"q_>5iZPL&bN69r6=B5(*/(^]*J;SQ!SrgR$gpl#!8)\GMbFrr%'@jj2h5s6"HS
%<r8ZsmJ-Lf!\L!9&!%gf00HnH[(CeEUH6$a?b!ejq$Wg2bHLp7g[jmbii*iWVu,X9YG`?15CL/$0i0ONa`sg/60687B$4OM9.7"0
%WE'9`Oq8(;'O&,R?'L@-,)i"`_CO\_iHXG*k&8!o;JM[O0dE>6f10"N]\gBW9c"tIp1GF24LO<rhPUh_WRd#BMuS4M4M>?a`oCuZ
%c2?[LLA6(,7PG\=nlf*s.(mLuQgCGLcfXt_b]*FciHB[ia_I&#kMN0'U"4.`W[Sk!lX[&ngS*ZCg$HR-p/#:(<M]>QfcTe+glh'g
%Q?9.0Ham:'Y7oc0TU$1Ps7YV?CE'Khh>^8he,.5&f%Z8]./ssO2=B8sl`N?B].k\0%I-Y$:UY>2T$=1IlNF;8HHpp'dZ^(BZm.]_
%;o=M"IAG1@OQkSrk$BDBr6!VgZ9L:EN-I-SY,690:=cHG8HO_u[G`LXV^@tY7i+o^m#IR<^,&m;c4W?>C9HW*!ktb.o`bfb1^e\M
%Y$C^%E/EmcBdq2WQ^uQ_m`5k^r9,:`5b52R1D=dEWZGl4l:H.l/5^+ISO_r!2Ba=MANh(IKZ(Af@reoHEl1!IkP"WOr6M29*K&*-
%eUU\R&N54n!+rY(!-GIdd:T,J_oaiA#A7/QGoc\K2=0XP^S_G-T-1$+a$9Lkm>'U!p6Ei9Uu*YU&:['k'X)8nVC<X"*+-^%nF@Co
%?XTaU76A@&[c8JU6E]6<2MePLVPqBf`%N=3GhHWb?OlWN4uI!1KU<sP2"(-CA>],J&0r+A?6#T2jK(pJ!na1IjZZ<8AN6'<1^?JA
%n"nB0<VJL)o3]Q3R^ik&=9N6afO?RrTD`R5o*`8r$+2E+GFkNljEmn"doWoC-[PqhOm\S=b,rX!+Y3-+Altn!@u-$/hRYOV^#r#K
%&=d>fI_K6P^Qp?4q]lb_gDUDu%sdV3VP[lRhKf/:"AR+0O2(_NS+b2@Iqo'f@M-Q5ef5C9[\1#QEi4[^kI$?4'q=c@F^9mA6c$!A
%b"tWW*l"f7]IEbPJkc;%2r<53P%p.$(Y48*'dbRf_e*rTfP3H`[3d842/U@t]5aMg`VNZ)D/A"F7(R1ff3c.1ai/K!.=<2X@_QlM
%Z?gSU"mN8ajoB[O]T^(bY/)^X"V=p2aD3C.R1ZI3f9sqp2_`0*nr&^O<k5j)(_RtL^iH\VCK`=7$A6q>s(\>ZZB?%u#S$JGJ>!a2
%`t6nTUqrko0Z]smSRej@<G#dSrh]&U:eKT0'p3mZqn#Z'%%-!r%Hf/%BYOn^FRYH'l58?9m)MZK2&fPq;@Zq:!uA5'KXB4M;XZaE
%NB\GR8!92ah)Lk;h8CP^C:_C)2f?As>c37[^N$2oT8(@WI5!j5oG`:l&Zg*Kn.VoLqt@kR\[a^c61Fm<9nhM%Qf]bq2gLn7'W[t+
%&5J:#D^pfTq5/"T%`7bI-bZ/gqMQF%81pfTNk>F82e3<J=UX'S4N[[<l)KHg.W6Hg\mKkPga1='Od(:ciOX[1c80CIO9FWr,3LB%
%BiF/9#ud&6X$Hp=E7MT"?WCnR>^;p1:g;QBA0oh?;f(ATk;Ek!,g^OHO\2(+dc.ZQc5:ac[P<j7f7;O4f*Ed>*-L@],WrtfOUNfK
%+a8*@E%B?gp6BgaQKrG8E,mt?EU6?R8?EqMoKk#Oc",2&1VJq[!"*.bHQE#%R*k53_,lnQ5<\k>H4_^^IDIj(n#^`=DR!>UGV&tE
%)n#Crs!TTp]6F\@\*^lJFg``h,;[6RbY"JAOn(UH1ZrD<:>\V$r&VHHNEm9!cm)M1H&-(8l*r7`B2cB^c!&0_)3MjjD)bV7_Q$!G
%^`Fi@Y=+m#OC_.haG=;(fFl4\0:0TCRA4W)MJg,$)&:Irl8nb+c/cJm:JjKj2kt6LpY1Q)`#?1mS@%Q>22JBGVq1%%V0lpps4C9E
%)CZje#Qqi,3-TFAFWEoPkc^diH$b?A'IucuP/m6F%)B`VU'hNDRB\07Vo!8M#:lgZYXM+U`E]V,I5I[ME,3$U)5(`mbKP(4g2,`,
%pCe_:NuQJY0@t"_,:N)R$M)]2!Vg;!BhC,(BL3Woqe@n_(2,#D*k+I,(8A]Vr-A%*rOFXdN>jP5gX)L"SPr+<9*<57\i5O?XToPd
%LhHc<P`S:+?nb<+GWpP-J2nL8SLV.O2jA;<jm:bu<e!Z366.8T+?7c>-i>B[T=R3n.U'MW8@!9K[PN'VKZneHbuW;6r?'EJ6:`>'
%*>50JB.T=:L:GX_d4""[.7CW#=d2e"8X52!Pe#$lW83.8A:D;tDM;^ELhs%^q[0Z@n+M["*P^d/;6G4[H5>a-nR+Z)Ys4\NGp;0h
%R`aq@)iE,XVU>S<_jtDSm0nCfkM]%AkFk2'KIoI1G%=8gTWi0:qoc4^@hfMWe5iqnIZ;QOPn2UX.FB=:eQc7;6L='s^2"8<]R+W@
%jUd!,*I&T7$hTj(R*c47>fj9o%1d0A1sT^SokJPj?@V%L[f6US,Z&[@C]r*N$rb&DXQlXJQL#fao%_hs=0,&-;&9Qt*Oo7_hkqKD
%#[TcXP&sGMg6C,8OcTrE=!0"F!d1nV7',##Lc7QC"!qcCLgBS`O[RJ?d4tD?>qU^h16Nca5dgYIe"s`kar@$WIBo>lg*p&DYQ#*V
%Wb^L\[(Y1]+aH?WA[)n7TK>=:mKPcf/(1JU1WW.rSAEI)o?jm_&uHk7Q`[rk<V1[p4$SW";f2_!/=KCs\k4St0j2350nk7iF.4dC
%^<R;<fkegg&A4O)BN_*po:oU'>6U!r\c_sB?VsAJ[-c?\bo=tPkdR$6@VhMd=0[5\)qY^<Hp@'pPFo%o9X\\_paPV6be>!A3Bg4'
%R@HcnGB#U&f\LcVf1gW;oM'nGKQ&NUESEq6q@ME78jBeXar>gQ.s]C.IX^rYJ`b>Pf-Q<g_A7Atd1Q;dm!sdNUT.J.D&8>s%MS9c
%k&*k`5+qe0pY,SSU[e^]oN*R^=AjMCj=Gj%DG#\eb.=(@WM8pU#\V"fA@&bV@_LMK$B__uDLSV@BT2+EiaJ-3X`qELXVsCMfi6'*
%\EQrXY#0Q'[:)KW!o(/ALn%-08d@-_47\F!FR>4E`#cDdEb99$Z"e8U0GLFW<?VY!dbJH__8Wo,f@)hSCiY$9V)qCEVN`A9)rRdl
%hOtiqI':XTR[\IEb&+b(9eGg\A*.B4lLUoDZ5`G7T"3N"XIcD]^U"b[U\9o-SpO2HHr<c1ebcSuRmtXX>:DnA@I>;k9M#el7d[`B
%Wp%I4'C^H1D.l102B!Hbo?;(C>32],(>jo7OjS!E?C,AL9"B']D&Q"hSYIs`UF0$B87UR1bX]1$fsZeE?aDJqDKE.hS4V6[H=VN8
%fCZOqh-YZ#?0trsA=$*#WYJq(j;"(0I;%Iu[Al5X%I%V&2@9+FHGaRM_3=uEgKtlDD*:&/9NqP??Yt:/N*+dKMAX'8_@0"iA[nLX
%DU[8+mr=gmN>cCiRq^-9XZ)<RfC66i*>j$Rf:YHWQ$dYkSFYNGdbq2IdArGn"0:3cjp`RYj[Q]'g';K->f$*2>mpkV,HGXU?f18f
%0oD*n?b/5W-G"s@Vk1s1(11fRZ;AlUMl;Aon&&`Y`p=\G[R*,RCsS/Hrl0B0+tN*5/O-/%+LkXf[Vs#d2K+T0=)e3i?4]g^<i;[*
%Mem+>hJ/S*=*$+Q7D29Rlt1$%kF:Pc5nCkT$I!Y'Lb+LZ64%q6bZ8<Y`;>2BF:k'gC@2]4LY6kJG(!\D\C^5Zm97-Nq\:h)[E&j8
%ptc>dOE^lWV^ZBdYnK)oD$7n7#%63`<7Zu>8'GPu!No3ubNY/.Cno;A]:HnWnjP2Sbne&cQ@_?Xe0I4CPaLOOfldrtCJhe/op<Ua
%]fdDK]$p/XmTJPkBci77lcP6\LSF_mdLd6GT0rT->'EuCJ@#1-[Tt^BAa63<F1-Y!?A?W*8S8l9D4%5FVqj54X"l<U%lUTTqPGSk
%6f,PkW1@dSV+f5ih>ELaj?,S'!TV3PIqr[)X1.O/SL]5SEN`q9l9:=?=:/KADTVVn0')@1E+\j4c8P9<A9Mb'r@+)?6i>(K=bsQC
%]_s#mp$C5F_:0dARSlAG]l?[:K9mZ%jL1!1`J:'PY<O%,aOT#mIbOEQmT_kT*W$2nVoll9FF=?6M)iith2GrDi.R!N@PJ5^@dD]h
%&a+Bf\uEeVN=*CYIX7`VC@sZn]j$8r`/.TS[6T[I\oF5:Hal4+qo,V6T4>=sU+bE5dHaR51]aL%cA-`UIq,)NLKp#V/ab\bb1ur;
%Jl41GCLZC2&I8m?`Ql+&G(=nI?,X4BMO*AsVr?"W]KQo?)'--Yb:fSp/kP59NYqQ5CspgZ'1WHmdbuS7V;-/i7"=o2DLRE8b'`io
%:YYiV4aY?nqW08,G&X!VO<_$c5FP>]gsl078#',jXC^Q-UT'2I-],l>9^QC"im8.(@j`?%a[G_O,X&RsD^+g)W'.VaWhNQ%]5*ou
%(Y<)lUq1pV:NmFK6BW-D&1,e`B3OcUT*)B>\I4X#Q5>R4I6kNXL_d0)HFVG`cO:8,rN^<:01I0_&gVa@MMnClGQVh`VsoI:B/r^\
%EGeD;65X<2p?4!LA;nH?"oV"VZpY+;3Q=G-+Z]hdqfOKIicM#$C=MbRHA^A8((i94lNhFZ:9PuZo1$>Q\7u+rE7ODc2SPf%,UYj#
%QE+\?K`Q)_C\[<Sq5l`DqjCc*J`O*_+_q?f(o,Z)A04mM+oEJ(3>/ot"J/(1Vc2^@BI6g\k03@(R!uL?"ictl^JQfV*%).+j<5D&
%6*Aje?rARa;_@hNRPY:+'k3oIofuuOIthdg$/X&bLL#%+MK:;G#EI;X)Z7T\qNjS#6D:mh*K8Paf;ki:P\A\MocC0=Y:G.E2#:OY
%p:\IrTqW*30p;7p8>g<E+?2Ld'%E2f_simRPdV,#Xu,Tn#$&p%$7*2^4>V+<9<:T]n=*WX+qUU5Vl#%<NN"KIWsK-e>O7e!c3q1&
%'ubm@1IMW:V\>_YF8Jo2O9\F[f!Ir?;+gf4-K=1HLK=IL#NP1//*i5WqB,.uk4:Ik9VAeq[25a)Se7pZ*^&0s0,D0E!@THSct.L#
%Q`%G:e\g/V_gF0j5t#afBLrEG0:48?o4>8<0g.<d1@Qi2T*RG7r%1B_m;p=jeU=/)<'>>XTW<BpcrA#e1f2eTf9g,kV3"GY<*V1*
%X'Bl7=H:mU@Y-;=dte0>P:aiRm[S[j_X-gAB_nqW_9j.BRT#M.Haq\ukC!EDpK6;A`BN5uI1eGqYu^h(Vpq\HZ*k()#,/^:<AXu5
%8_Fr2J[Nc`S`E/16kJ/6Ii/+Qn8CNePc38``5mE9Vd_.<Q8qV>Eg+U[Ljct6-q464M<N+ePGf<?luM&G"N@B]LRUl4,uTn3:`p_m
%@=2mCZIm>jd:U7&#D)98oW;ruaTUC8["iX#/18RF-"lk(,6\$UIm0"nl>A5I)edP'I6TLHAFDDSfbs8g*#i\n%kj6KGludja<1N2
%)<qc.F'X;WC-!*q7lbR3^9aKMqltE3_$a9odOZR]Ke:g,Mq=-%nqR_<SB/\ZoH5cBa[885RQ$L"f7a4-g3#uS5/Io3C"#:cj=iMj
%qV0&c(*V:H2k+9"(Q-26L"dM(/,]=bq5r7'_L=EH0W't$bM9TU`5;U]BnPC<K7k*V.^GXL=70d5ejIp&o]RDt^!i\$%t1oXoP43F
%L]2/AB0-qX=GW@``/gBV?RmKBERFr"[b6LHA(B*jR:t[:j;r%1nn])&CMn"qaJ?h2W_`j7+S9gO?-tZK(eh/KJO*6N"PP]dW2R1\
%TsqAD9]:X+KVWW&_`Kh`3H3W:2Ao?u`^gMsh"c?KTpN.:]r""Y8B>h+]Xn'>?D"HpFCtYmJhPe"m>Rhqs/qQ8gWC)YBUOh_)"ikP
%pB+*I`([l3W>tK+MME!0l(LpTAm\;dYHgV>pr+.n?K=b4CCO#UZE`A@*5Q^kJ.f_"TrS@]VmLjpP\sr#2s+LI#TD\$jps0A4#7=q
%&!/D4r/_["Fk45?]?6G`D"0;=$iLHCW35"PK%mfeURt\^"%Lj!qC`rfY@lUA(JOU!gEjsPIFRfpASb!8Nd`QqV?E#[AK`:7ai-4t
%<BSn24i2&.qgm3pF,'<b_a+8;+mZ-B32hJ9&`]l>*-7",E2aAO5DPV([pce@7^P%FNg_0-,BUd5dc/%OR2Lej8i$=Oa%`_eP'tiX
%c%!1QkaQ*$I-ZC_WbS;OhaGhHWATkO;)5iP8@sn!1MBbGW`o@h/b;WU?FdPljd8E+B9?*f:m?4"b97G<;5GGu1<MN,Jf%>W>8T9N
%[Zc*>?YP7/+A!31_4P&^"^Q_d&+YCQ.^<IJ3nf6jF]pD2d>IXta.N3Uq%ctHbDj/'m>:@aQC"4^T>-S;or-i_RXk<i/A8o7Arb:b
%.S\ipAGS'%ILPL,)%B>Kk9he0?har*&m`mS_]]"`\n"^kr_nD&p;fXT=Kb"'b4dLgrpD4n;%Zl6LIpk%S8j\]@(D#h@r[(Cem14P
%E:.(2Jm]c_0l9LB"JYQq_k6UM2&LVnb:feic[dh'j`C>TiP[C^KNc0:.iFPW*pLahl&[6'6n<2/gA4)9U]OOX:nSs$,.e'1jQW\$
%bMH-sM<g]9]-[EHLA8@]H']MZDJL9H&4$^]&`aTTBuHMBQir>IgK-;^`.b&&k'\U`0,aZ5PKHCn79Aj;<k>=3-(rLh*pto`1NuYl
%<tnrS4Hi;a;?=(:g/;dS0,I3A&Rht.NXT:aC'D=*)'FsH6/A@YR>^f.`Ak2M?\$`\;@sr&,D2rA(N3^(>IlkNiFrB2jYW!r$H#1?
%&gXGscU&,4d=sqi98g<@Z&/@Mk8bc;p_Mn\GNk(NnikiEqHN\HViKd,4?323@ttZ_;m_IU][[=4i:B:bgUY?iYoIsMSkgJ2q(><L
%Qb):em>hj"5D%I0Q(rUJqb%JHMN5+ifr#G:<CntpK]?DG:HSLir>7OTIZ4G,=f$^3i,K8VH'UC-ak1a/<E]4ZL;.lgg@9Z/"k:Yc
%qf,[s`LXt%O_O(lqHhk.`#9_<ZZ+0A6AlNLgdQ]U?$IJr!&b0V0O.W3gj`0%pf:s3\"Sr(#1!OZn=W?P*5oMU;M'm4H+<V5TBVmP
%,P9\4?O)'>.:Ea'PB1D=#Y(BD-r'&6j912ndC^<p_\fc/l)-'mUuc0trikumKc5>2Q:b$D2`f0:hmj+d^iN^]KtUdB[au#B+9e"?
%*sHH]Y"YlDmX#ddp'U\J+K9\g'%g&=Jo)nR"]c<Gqn7_K*t]j8a@6$G4oCX"Af61'4dKCA=d/WSf2VqGM62k!\,euSUa4J?MBG!1
%8+PIjDb>RP^$(oLC]-4!"B=OLTtaGs+=\%:(%UZao+7TB+1cV_dg7q&BP2Hc=kpYVV1pL%A7V':4],NF..Xgk;.]&\?d=*cP3SSc
%%TKAe/NM:c7IR.4a-tB(nl[)">RK>^][>$H<Y)!P9Z'IUG7V$42")^hMiP[F;HXqa&NhAiiAqPA0^O:?m@/FAli_sjFAF\m?&4L3
%b$u73=fHJ!F)&)seqU/+G:O:UVFDo!:!.$Y=Vn?XVkti9i.+o=,o^#'0OPL:VHh95$XKG9De"DFNBiD:7_3/cK7I_KO^%tqG"8!Z
%';=q=VD;[f[3$5!m'+]=oeP'8/ElcCEcCVH.S1gHSIc*"!o-b9fAB>h]';,_PpBq66dehi;t94o)R6a.+G'SlGpS@h/Wu3>.BD:i
%,8\4j33643m'!*qhm#-Jm5Y>?=LVr"MP:9V&!V>$Lg/moFlemG<T!4E`1D*a?2`nAdL$!3?^&AP,+L*i[2;\>e>IF%gGdUtIH(==
%Pe`PWq/i$Pe1qn5Rmo(G7CE>3c$^s0$^uDrI>tNK7%."$_+W(USm0RH0r`pA9bm-uW-[>6aikLU7&*>I7"7]Rbf)3)UI+`kf,sKu
%=K^,<%tVJqM=4m`YoOl1P#iq.*B%tAjc4pEj`+t#9",ibV3%/DR[(rno-.,]LX=\4C4Ar@VJ%a96E:_E`%S5ObL^=j)(^Cr'T)+V
%;=FiUJkLI&\\t;(V/>5#k]o%L<-;>>,O1=cbj&:?Z3-W,'nA^Sq]:d*>&+F3nC,&K4kX4M.WZYQEi-*akEFc2ak>\,p3@XkiAn/J
%iWMb7h)h]:peWTj"dc@J_<(g0E?u\,)+;Rb8,0kuh,:GR(MGQ=I_@XD0;b2CemdNtm+Q(8ZP4-NiU06A)TNPu\:O",)<SiMO+5X8
%)==B42lY2@d>VLE=.9bI63N.WB??s%DNP:i4uTU$1#?rnr3bo"Yt6=!l<K]"I\L[j(hVS'F:sXcGstR<HQ!-t!M@,'+l.,1c!B%F
%RXf8po6_C8e%eB@F_r%@qWgkrK*%jnrJBP![..P%R:UFKF00;>Bi#TNnAp^%S$/Z<Kt"q@%GrTb(s@%3=KZh:_!8)-=h@m^Fg@/E
%VKuml+X<:?r#B5aC/%-p-s5D/2uFKtU#Ar]Ui+N^+P]3)k2YgH`jskqYM6!D;m@uf$MC\27QY!Bkcc?+bY&/-j#]F%lk03(,P\>O
%d]8u3+r6_&I,nA0j%d2ul-AMuWfPlhdh0&mk=q$o#bn;9PnP$%/KiW%.e9OVD;Achf%/K,LWCTh]'r_IiEmH.G8?:?lsCJcWJb80
%7!f$3,>?".<Td4FG_:Y0T]T-YK7ehTlhCQH3tbOdL'S/J(0cbUfV)*1qjFK@VqU7$?C^eaoqBHn6:*\3BEjQ4*Fs>DDB5(pY!>0c
%[#HP?GPZ2bV!?-VF4F72ckLY4f]]?la06/4?*92Lh0S6@I]@0"808diDG0jVD#t><@e86'[g9'sOQHg1C=\:%=Whd6`KRoT"J"^>
%l>GF/:>]jZS+eGrG`Qg+,S?T&BcSYYC!eu*\;DWbE<I>_iCaLDVZS>/WoM8,9;["3#%7^jV,oZTH=GN#-aG$\&&2&:%7mjOJ8Zf!
%#dA.O)hM_H3'u?aCC$7d/s0FAKMc^aOJnXMm7%H%%'K;<UYiRg*Dsm/E!`-s/C2!E<.blN372A#hnVW)DG&WH)Bs!`W:u*"QYVE[
%gXT#7MM@6>>c=8Ul8.tn-J,]Oo>t'F64D?g!&_7GMGZ,Bbqcbtf4Z$#M?:3>GJB9o&l^A$5S[4RjCi0s?"G[%2nG]0/Uot8P>1'h
%Nu*$1PCEP:2h1iLQf0%cZ2TekrSb6S^]!JBhgb7B1Ap.(^\uu4s7Q8-J,eK>msk>Chu2fo+23*sp()Z2<T!c@qPT,+IK/,qrqsh*
%^O,b)s8M&n@H!9-5PW2NIe?M:l/t;.5M/SSI/~>
%AI9_PrivateDataEnd
